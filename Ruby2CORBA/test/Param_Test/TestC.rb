# -*- Ruby -*-
#
# ****  Code generated by the R2CORBA IDL Compiler ****
# R2CORBA has been developed by:
#        Remedy IT
#        Nijkerk, GLD
#        The Netherlands
#        http://www.remedy.nl  http://www.theaceorb.nl
#
require 'corba'

CORBA.implement('Test.idl', {}, CORBA::IDL::CLIENT_STUB) {

module Types

  class TString < String
    def TString._tc; @@tc_TString ||= CORBA::TypeCode::Alias.new('IDL:Remedy/Types/TString:1.0', 'TString', self, CORBA::_tc_string); end
  end # typedef TString
end #of module Types

module Test

  module Hello; end  ## interface forward
  Max_longlong = 9223372036854775807
  Min_longlong = -9223372036854775808
  Max_ulonglong = 18446744073709551615
  Min_ulonglong = 0
  Max_long = 2147483647
  Min_long = -2147483648
  Max_ulong = 4294967295
  Min_ulong = 0
  Max_short = 32767
  Min_short = -32768
  Max_ushort = 65535
  Min_ushort = 0
  Max_octet = 255
  Min_octet = 0
  class TShort < CORBA::_tc_short.get_type
    def TShort._tc; @@tc_TShort ||= CORBA::TypeCode::Alias.new('IDL:Remedy/Test/TShort:1.0', 'TShort', self, CORBA::_tc_short); end
  end # typedef TShort
  class TULong < CORBA::_tc_ulong.get_type
    def TULong._tc; @@tc_TULong ||= CORBA::TypeCode::Alias.new('IDL:Remedy/Test/TULong:1.0', 'TULong', self, CORBA::_tc_ulong); end
  end # typedef TULong
  class TString < String
    def TString._tc; @@tc_TString ||= CORBA::TypeCode::Alias.new('IDL:Remedy/Test/TString:1.0', 'TString', self, CORBA::_tc_string); end
  end # typedef TString
  class TString2 < Test::TString
    def TString2._tc; @@tc_TString2 ||= CORBA::TypeCode::Alias.new('IDL:Remedy/Test/TString2:1.0', 'TString2', self,Test::TString._tc); end
  end # typedef TString2
  class TString3 < Types::TString
    def TString3._tc; @@tc_TString3 ||= CORBA::TypeCode::Alias.new('IDL:Remedy/Test/TString3:1.0', 'TString3', self,Types::TString._tc); end
  end # typedef TString3
  class TString128 < String
    def TString128._tc; @@tc_TString128 ||= CORBA::TypeCode::Alias.new('IDL:Remedy/Test/TString128:1.0', 'TString128', self, CORBA::TypeCode::String.new(128)); end
  end # typedef TString128
  class TMyAny < CORBA::_tc_any.get_type
    def TMyAny._tc; @@tc_TMyAny ||= CORBA::TypeCode::Alias.new('IDL:Remedy/Test/TMyAny:1.0', 'TMyAny', self, CORBA::_tc_any); end
  end # typedef TMyAny
  class TStringSeq < CORBA::StringSeq
    def TStringSeq._tc; @@tc_TStringSeq ||= CORBA::TypeCode::Alias.new('IDL:Remedy/Test/TStringSeq:1.0', 'TStringSeq', self,CORBA::StringSeq._tc); end
  end # typedef TStringSeq
  MyConst = 32
  MyOctet = 243
  MyChar = 'A'
  MyWChar = 97
  MyString = 'ABC'
  MyWString = [97,98,99,4660]
  DIM1 = 3
  class TLongCube < Array
    def TLongCube._tc
      @@tc_TLongCube ||= CORBA::TypeCode::Alias.new('IDL:Remedy/Test/TLongCube:1.0', 'TLongCube', self,
        CORBA::TypeCode::Array.new(CORBA._tc_long, 3, 3, 4))
    end
  end # typedef TLongCube
  class Test_enum < ::Fixnum
    def Test_enum._tc
      @@tc_Test_enum ||= CORBA::TypeCode::Enum.new('IDL:Remedy/Test/test_enum:1.0'.freeze, 'Test_enum', [
          'TE_ZEROTH',
          'TE_FIRST',
          'TE_SECOND',
          'TE_THIRD',
          'TE_FOURTH'])
    end
    self._tc  # register typecode
  end # enum Test_enum
  TE_ZEROTH = 0
  TE_FIRST = 1
  TE_SECOND = 2
  TE_THIRD = 3
  TE_FOURTH = 4

  class S1 < CORBA::Portable::Struct

    class S2 < CORBA::Portable::Struct

      def S2._tc
        @@tc_S2 ||= CORBA::TypeCode::Struct.new('IDL:Remedy/Test/S1/S2:1.0'.freeze, 'S2', self,
           [['m_b', CORBA._tc_boolean]])
      end
      self._tc  # register typecode
      attr_accessor :m_b
      def initialize(*param_)
        @m_b = param_
      end

    end #of struct S2

    def S1._tc
      @@tc_S1 ||= CORBA::TypeCode::Struct.new('IDL:Remedy/Test/S1:1.0'.freeze, 'S1', self,
         [['m_one', CORBA._tc_long],
          ['m_two', CORBA._tc_double],
          ['m_three', CORBA._tc_string],
          ['m_four', Test::S1::S2._tc],
          ['m_five', Test::Test_enum._tc]])
    end
    self._tc  # register typecode
    attr_accessor :m_one
    attr_accessor :m_two
    attr_accessor :m_three
    attr_accessor :m_four
    attr_accessor :m_five
    def initialize(*param_)
      @m_one,
      @m_two,
      @m_three,
      @m_four,
      @m_five = param_
    end

  end #of struct S1
  class TS3Seq < Array
    def TS3Seq._tc
      @@tc_TS3Seq ||= CORBA::TypeCode::Alias.new('IDL:Remedy/Test/TS3Seq:1.0', 'TS3Seq', self,
        CORBA::TypeCode::Sequence.new(CORBA::TypeCode::Recursive.new('IDL:Remedy/Test/S3:1.0')))
    end
  end # typedef TS3Seq
  class TS3SeqSeq < Array
    def TS3SeqSeq._tc
      @@tc_TS3SeqSeq ||= CORBA::TypeCode::Alias.new('IDL:Remedy/Test/TS3SeqSeq:1.0', 'TS3SeqSeq', self,
        CORBA::TypeCode::Sequence.new(Test::TS3Seq._tc).freeze)
    end
  end # typedef TS3SeqSeq

  class S3 < CORBA::Portable::Struct

    def S3._tc
      @@tc_S3 ||= CORBA::TypeCode::Struct.new('IDL:Remedy/Test/S3:1.0'.freeze, 'S3', self,
         [['m_seq', Test::TS3Seq._tc],
          ['m_has_more', CORBA._tc_boolean]])
    end
    self._tc  # register typecode
    attr_accessor :m_seq
    attr_accessor :m_has_more
    def initialize(*param_)
      @m_seq,
      @m_has_more = param_
    end

  end #of struct S3
  class S1Seq < Array
    def S1Seq._tc
      @@tc_S1Seq ||= CORBA::TypeCode::Alias.new('IDL:Remedy/Test/S1Seq:1.0', 'S1Seq', self,
        CORBA::TypeCode::Sequence.new(Test::S1._tc).freeze)
    end
  end # typedef S1Seq
  class TShortSeq < Array
    def TShortSeq._tc
      @@tc_TShortSeq ||= CORBA::TypeCode::Alias.new('IDL:Remedy/Test/TShortSeq:1.0', 'TShortSeq', self,
        CORBA::TypeCode::Sequence.new(Test::TShort._tc, 10).freeze)
    end
  end # typedef TShortSeq
  class TSWitch < Test::Test_enum
    def TSWitch._tc; @@tc_TSWitch ||= CORBA::TypeCode::Alias.new('IDL:Remedy/Test/TSWitch:1.0', 'TSWitch', self,Test::Test_enum._tc); end
  end # typedef TSWitch

  class U1 < CORBA::Portable::Union

    def U1._tc
      @@tc_U1 ||= CORBA::TypeCode::Union.new('IDL:Remedy/Test/U1:1.0'.freeze, 'U1', self,
          Test::TSWitch._tc,
         [[Test::TE_ZEROTH, 'm_l', CORBA._tc_long],
          [Test::TE_FIRST, 'm_str', CORBA._tc_string],
          [Test::TE_SECOND, 'm_str', CORBA._tc_string],
          [:default, 'm_bool', CORBA._tc_boolean]])
    end
    self._tc  # register typecode
    def m_l; @value; end
    def m_l=(val); _set_value(0, val); end
    def m_str; @value; end
    def m_str=(val); _set_value(1, val); end
    def m_bool; @value; end
    def m_bool=(val); _set_value(3, val); end
  end #of union U1

  module Hello  ## interface


    Id = 'IDL:Remedy/Test/Hello:1.0'.freeze
    Ids = [ Id ].freeze

    def Hello._tc; @@tc_Hello ||= CORBA::TypeCode::ObjectRef.new(Id, 'Hello', self); end
    self._tc  # register typecode

    def Hello._narrow(obj)
      return CORBA::Stub.create_stub(obj)._narrow!(self)
    end

    def Hello._duplicate(obj)
      return CORBA::Stub.create_stub(super(obj))._narrow!(self)
    end

    def _interface_repository_id
      self.class::Id
    end


    def max_LongLong()
      _ret = self._invoke('_get_Max_LongLong', {
        :result_type => CORBA._tc_longlong})
      _ret
    end #of attribute get_Max_LongLong

    def min_LongLong()
      _ret = self._invoke('_get_Min_LongLong', {
        :result_type => CORBA._tc_longlong})
      _ret
    end #of attribute get_Min_LongLong

    def max_ULongLong()
      _ret = self._invoke('_get_Max_ULongLong', {
        :result_type => CORBA._tc_ulonglong})
      _ret
    end #of attribute get_Max_ULongLong

    def min_ULongLong()
      _ret = self._invoke('_get_Min_ULongLong', {
        :result_type => CORBA._tc_ulonglong})
      _ret
    end #of attribute get_Min_ULongLong

    def max_Long()
      _ret = self._invoke('_get_Max_Long', {
        :result_type => CORBA._tc_long})
      _ret
    end #of attribute get_Max_Long

    def min_Long()
      _ret = self._invoke('_get_Min_Long', {
        :result_type => CORBA._tc_long})
      _ret
    end #of attribute get_Min_Long

    def max_ULong()
      _ret = self._invoke('_get_Max_ULong', {
        :result_type => CORBA._tc_ulong})
      _ret
    end #of attribute get_Max_ULong

    def min_ULong()
      _ret = self._invoke('_get_Min_ULong', {
        :result_type => CORBA._tc_ulong})
      _ret
    end #of attribute get_Min_ULong

    def max_Short()
      _ret = self._invoke('_get_Max_Short', {
        :result_type => CORBA._tc_short})
      _ret
    end #of attribute get_Max_Short

    def min_Short()
      _ret = self._invoke('_get_Min_Short', {
        :result_type => CORBA._tc_short})
      _ret
    end #of attribute get_Min_Short

    def max_UShort()
      _ret = self._invoke('_get_Max_UShort', {
        :result_type => CORBA._tc_ushort})
      _ret
    end #of attribute get_Max_UShort

    def min_UShort()
      _ret = self._invoke('_get_Min_UShort', {
        :result_type => CORBA._tc_ushort})
      _ret
    end #of attribute get_Min_UShort

    def max_Octet()
      _ret = self._invoke('_get_Max_Octet', {
        :result_type => CORBA._tc_octet})
      _ret
    end #of attribute get_Max_Octet

    def min_Octet()
      _ret = self._invoke('_get_Min_Octet', {
        :result_type => CORBA._tc_octet})
      _ret
    end #of attribute get_Min_Octet

    def get_string()
      _ret = self._invoke('get_string', {
        :result_type => Test::TString2._tc})
      _ret
    end #of operation get_string

    def message()
      _ret = self._invoke('_get_Message', {
        :result_type => Test::TString3._tc})
      _ret
    end #of attribute get_Message
    def message=(val)
      val = Test::TString3._tc.validate(val)
      self._invoke('_set_Message', {
        :arg_list => [
          ['val', CORBA::ARG_IN, Test::TString3._tc, val]],
        :result_type => CORBA._tc_void})
    end #of attribute set_Message

    def numbers()
      _ret = self._invoke('_get_Numbers', {
        :result_type => Test::TShortSeq._tc})
      _ret
    end #of attribute get_Numbers
    def numbers=(val)
      val = Test::TShortSeq._tc.validate(val)
      self._invoke('_set_Numbers', {
        :arg_list => [
          ['val', CORBA::ARG_IN, Test::TShortSeq._tc, val]],
        :result_type => CORBA._tc_void})
    end #of attribute set_Numbers

    def structSeq()
      _ret = self._invoke('_get_StructSeq', {
        :result_type => Test::S1Seq._tc})
      _ret
    end #of attribute get_StructSeq
    def structSeq=(val)
      val = Test::S1Seq._tc.validate(val)
      self._invoke('_set_StructSeq', {
        :arg_list => [
          ['val', CORBA::ARG_IN, Test::S1Seq._tc, val]],
        :result_type => CORBA._tc_void})
    end #of attribute set_StructSeq

    def theCube()
      _ret = self._invoke('_get_theCube', {
        :result_type => Test::TLongCube._tc})
      _ret
    end #of attribute get_theCube
    def theCube=(val)
      val = Test::TLongCube._tc.validate(val)
      self._invoke('_set_theCube', {
        :arg_list => [
          ['val', CORBA::ARG_IN, Test::TLongCube._tc, val]],
        :result_type => CORBA._tc_void})
    end #of attribute set_theCube

    def anyValue()
      _ret = self._invoke('_get_AnyValue', {
        :result_type => CORBA._tc_any})
      _ret
    end #of attribute get_AnyValue
    def anyValue=(val)
      val = CORBA._tc_any.validate(val)
      self._invoke('_set_AnyValue', {
        :arg_list => [
          ['val', CORBA::ARG_IN, CORBA._tc_any, val]],
        :result_type => CORBA._tc_void})
    end #of attribute set_AnyValue

    def selfref()
      _ret = self._invoke('_get_selfref', {
        :result_type => Test::Hello._tc})
      _ret
    end #of attribute get_selfref

    def s3Value()
      _ret = self._invoke('_get_S3Value', {
        :result_type => CORBA._tc_any})
      _ret
    end #of attribute get_S3Value
    def s3Value=(val)
      val = CORBA._tc_any.validate(val)
      self._invoke('_set_S3Value', {
        :arg_list => [
          ['val', CORBA::ARG_IN, CORBA._tc_any, val]],
        :result_type => CORBA._tc_void})
    end #of attribute set_S3Value

    def unionValue()
      _ret = self._invoke('_get_UnionValue', {
        :result_type => Test::U1._tc})
      _ret
    end #of attribute get_UnionValue
    def unionValue=(val)
      val = Test::U1._tc.validate(val)
      self._invoke('_set_UnionValue', {
        :arg_list => [
          ['val', CORBA::ARG_IN, Test::U1._tc, val]],
        :result_type => CORBA._tc_void})
    end #of attribute set_UnionValue

    def run_test(instr, inoutstr)
      instr = Test::TString._tc.validate(instr)
      inoutstr = CORBA._tc_string.validate(inoutstr)
      _ret = self._invoke('run_test', {
        :arg_list => [
          ['instr', CORBA::ARG_IN, Test::TString._tc, instr],
          ['inoutstr', CORBA::ARG_INOUT, CORBA._tc_string, inoutstr],
          ['outstr', CORBA::ARG_OUT, CORBA._tc_string]],
        :result_type => CORBA._tc_long})
      _ret
    end #of operation run_test

    def shutdown()    # oneway
      self._invoke('shutdown', {})
    end #of operation shutdown
  end #of interface Hello
end #of module Test

} ## end of 'Test.idl'
# -*- END -*-
