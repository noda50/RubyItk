# -*- Ruby -*-
#
# ****  Code generated by the R2CORBA IDL Compiler ****
# R2CORBA has been developed by:
#        Remedy IT
#        Nijkerk, GLD
#        The Netherlands
#        http://www.remedy.nl  http://www.theaceorb.nl
#
require 'corba/poa.rb'

module POA
  CORBA.implement('CosNaming.idl', {}, CORBA::IDL::SERVANT_INTF) {

  module CosNaming

    class BindingIterator < PortableServer::Servant; end  ## servant forward

    class NamingContext < PortableServer::Servant ## servant

      module Intf
        Id = 'IDL:omg.org/CosNaming/NamingContext:1.0'.freeze
        Ids = [ Id ]
        Operations = {}

        Operations.store(:bind, {
          :arg_list => [
            ['n', CORBA::ARG_IN, ::CosNaming::Name._tc],
            ['obj', CORBA::ARG_IN, CORBA._tc_Object]],
          :result_type => CORBA._tc_void,
          :exc_list => [
            ::CosNaming::NamingContext::NotFound._tc,
            ::CosNaming::NamingContext::CannotProceed._tc,
            ::CosNaming::NamingContext::InvalidName._tc,
            ::CosNaming::NamingContext::AlreadyBound._tc]})

        def bind(n, obj)
          raise ::CORBA::NO_IMPLEMENT.new(
                   'unimplemented servant operation',
                   1, ::CORBA::COMPLETED_NO)
        end

        Operations.store(:rebind, {
          :arg_list => [
            ['n', CORBA::ARG_IN, ::CosNaming::Name._tc],
            ['obj', CORBA::ARG_IN, CORBA._tc_Object]],
          :result_type => CORBA._tc_void,
          :exc_list => [
            ::CosNaming::NamingContext::NotFound._tc,
            ::CosNaming::NamingContext::CannotProceed._tc,
            ::CosNaming::NamingContext::InvalidName._tc]})

        def rebind(n, obj)
          raise ::CORBA::NO_IMPLEMENT.new(
                   'unimplemented servant operation',
                   1, ::CORBA::COMPLETED_NO)
        end

        Operations.store(:bind_context, {
          :arg_list => [
            ['n', CORBA::ARG_IN, ::CosNaming::Name._tc],
            ['nc', CORBA::ARG_IN, ::CosNaming::NamingContext._tc]],
          :result_type => CORBA._tc_void,
          :exc_list => [
            ::CosNaming::NamingContext::NotFound._tc,
            ::CosNaming::NamingContext::CannotProceed._tc,
            ::CosNaming::NamingContext::InvalidName._tc,
            ::CosNaming::NamingContext::AlreadyBound._tc]})

        def bind_context(n, nc)
          raise ::CORBA::NO_IMPLEMENT.new(
                   'unimplemented servant operation',
                   1, ::CORBA::COMPLETED_NO)
        end

        Operations.store(:rebind_context, {
          :arg_list => [
            ['n', CORBA::ARG_IN, ::CosNaming::Name._tc],
            ['nc', CORBA::ARG_IN, ::CosNaming::NamingContext._tc]],
          :result_type => CORBA._tc_void,
          :exc_list => [
            ::CosNaming::NamingContext::NotFound._tc,
            ::CosNaming::NamingContext::CannotProceed._tc,
            ::CosNaming::NamingContext::InvalidName._tc]})

        def rebind_context(n, nc)
          raise ::CORBA::NO_IMPLEMENT.new(
                   'unimplemented servant operation',
                   1, ::CORBA::COMPLETED_NO)
        end

        Operations.store(:resolve, {
          :arg_list => [
            ['n', CORBA::ARG_IN, ::CosNaming::Name._tc]],
          :result_type => CORBA._tc_Object,
          :exc_list => [
            ::CosNaming::NamingContext::NotFound._tc,
            ::CosNaming::NamingContext::CannotProceed._tc,
            ::CosNaming::NamingContext::InvalidName._tc]})

        def resolve(n)
          raise ::CORBA::NO_IMPLEMENT.new(
                   'unimplemented servant operation',
                   1, ::CORBA::COMPLETED_NO)
        end

        Operations.store(:unbind, {
          :arg_list => [
            ['n', CORBA::ARG_IN, ::CosNaming::Name._tc]],
          :result_type => CORBA._tc_void,
          :exc_list => [
            ::CosNaming::NamingContext::NotFound._tc,
            ::CosNaming::NamingContext::CannotProceed._tc,
            ::CosNaming::NamingContext::InvalidName._tc]})

        def unbind(n)
          raise ::CORBA::NO_IMPLEMENT.new(
                   'unimplemented servant operation',
                   1, ::CORBA::COMPLETED_NO)
        end

        Operations.store(:new_context, {
          :result_type => ::CosNaming::NamingContext._tc})

        def new_context()
          raise ::CORBA::NO_IMPLEMENT.new(
                   'unimplemented servant operation',
                   1, ::CORBA::COMPLETED_NO)
        end

        Operations.store(:bind_new_context, {
          :arg_list => [
            ['n', CORBA::ARG_IN, ::CosNaming::Name._tc]],
          :result_type => ::CosNaming::NamingContext._tc,
          :exc_list => [
            ::CosNaming::NamingContext::NotFound._tc,
            ::CosNaming::NamingContext::AlreadyBound._tc,
            ::CosNaming::NamingContext::CannotProceed._tc,
            ::CosNaming::NamingContext::InvalidName._tc]})

        def bind_new_context(n)
          raise ::CORBA::NO_IMPLEMENT.new(
                   'unimplemented servant operation',
                   1, ::CORBA::COMPLETED_NO)
        end

        Operations.store(:destroy, {
          :result_type => CORBA._tc_void,
          :exc_list => [
            ::CosNaming::NamingContext::NotEmpty._tc]})

        def destroy()
          raise ::CORBA::NO_IMPLEMENT.new(
                   'unimplemented servant operation',
                   1, ::CORBA::COMPLETED_NO)
        end

        Operations.store(:list, {
          :arg_list => [
            ['how_many', CORBA::ARG_IN, CORBA._tc_ulong],
            ['bl', CORBA::ARG_OUT, ::CosNaming::BindingList._tc],
            ['bi', CORBA::ARG_OUT, ::CosNaming::BindingIterator._tc]],
          :result_type => CORBA._tc_void})

        def list(how_many)
          raise ::CORBA::NO_IMPLEMENT.new(
                   'unimplemented servant operation',
                   1, ::CORBA::COMPLETED_NO)
        end

      end #of Intf

      Id = Intf::Id

      include_interface(PortableServer::Servant::Intf)

      include Intf

      def _this; ::CosNaming::NamingContext._narrow(super); end
    end #of servant NamingContext

    class BindingIterator < PortableServer::Servant ## servant

      module Intf
        Id = 'IDL:omg.org/CosNaming/BindingIterator:1.0'.freeze
        Ids = [ Id ]
        Operations = {}

        Operations.store(:next_one, {
          :arg_list => [
            ['b', CORBA::ARG_OUT, ::CosNaming::Binding._tc]],
          :result_type => CORBA._tc_boolean})

        def next_one()
          raise ::CORBA::NO_IMPLEMENT.new(
                   'unimplemented servant operation',
                   1, ::CORBA::COMPLETED_NO)
        end

        Operations.store(:next_n, {
          :arg_list => [
            ['how_many', CORBA::ARG_IN, CORBA._tc_ulong],
            ['bl', CORBA::ARG_OUT, ::CosNaming::BindingList._tc]],
          :result_type => CORBA._tc_boolean})

        def next_n(how_many)
          raise ::CORBA::NO_IMPLEMENT.new(
                   'unimplemented servant operation',
                   1, ::CORBA::COMPLETED_NO)
        end

        Operations.store(:destroy, {
          :result_type => CORBA._tc_void})

        def destroy()
          raise ::CORBA::NO_IMPLEMENT.new(
                   'unimplemented servant operation',
                   1, ::CORBA::COMPLETED_NO)
        end

      end #of Intf

      Id = Intf::Id

      include_interface(PortableServer::Servant::Intf)

      include Intf

      def _this; ::CosNaming::BindingIterator._narrow(super); end
    end #of servant BindingIterator

    class NamingContextExt < PortableServer::Servant ## servant

      module Intf
        Id = 'IDL:omg.org/CosNaming/NamingContextExt:1.0'.freeze
        Ids = [ Id ]
        Operations = {}

        Operations.store(:to_string, {
          :arg_list => [
            ['n', CORBA::ARG_IN, ::CosNaming::Name._tc]],
          :result_type => ::CosNaming::NamingContextExt::StringName._tc,
          :exc_list => [
            ::CosNaming::NamingContext::InvalidName._tc]})

        def to_string(n)
          raise ::CORBA::NO_IMPLEMENT.new(
                   'unimplemented servant operation',
                   1, ::CORBA::COMPLETED_NO)
        end

        Operations.store(:to_name, {
          :arg_list => [
            ['sn', CORBA::ARG_IN, ::CosNaming::NamingContextExt::StringName._tc]],
          :result_type => ::CosNaming::Name._tc,
          :exc_list => [
            ::CosNaming::NamingContext::InvalidName._tc]})

        def to_name(sn)
          raise ::CORBA::NO_IMPLEMENT.new(
                   'unimplemented servant operation',
                   1, ::CORBA::COMPLETED_NO)
        end

        Operations.store(:to_url, {
          :arg_list => [
            ['addr', CORBA::ARG_IN, ::CosNaming::NamingContextExt::Address._tc],
            ['sn', CORBA::ARG_IN, ::CosNaming::NamingContextExt::StringName._tc]],
          :result_type => ::CosNaming::NamingContextExt::URLString._tc,
          :exc_list => [
            ::CosNaming::NamingContextExt::InvalidAddress._tc,
            ::CosNaming::NamingContext::InvalidName._tc]})

        def to_url(addr, sn)
          raise ::CORBA::NO_IMPLEMENT.new(
                   'unimplemented servant operation',
                   1, ::CORBA::COMPLETED_NO)
        end

        Operations.store(:resolve_str, {
          :arg_list => [
            ['n', CORBA::ARG_IN, ::CosNaming::NamingContextExt::StringName._tc]],
          :result_type => CORBA._tc_Object,
          :exc_list => [
            ::CosNaming::NamingContext::NotFound._tc,
            ::CosNaming::NamingContext::CannotProceed._tc,
            ::CosNaming::NamingContext::InvalidName._tc]})

        def resolve_str(n)
          raise ::CORBA::NO_IMPLEMENT.new(
                   'unimplemented servant operation',
                   1, ::CORBA::COMPLETED_NO)
        end

      end #of Intf

      Id = Intf::Id

      include_interface(CosNaming::NamingContext::Intf)

      include Intf

      def _this; ::CosNaming::NamingContextExt._narrow(super); end
    end #of servant NamingContextExt
  end #of module CosNaming

  } ## end of 'CosNaming.idl'
end #of module POA
# -*- END -*-
