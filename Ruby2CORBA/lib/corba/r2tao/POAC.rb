# -*- Ruby -*-
#
# ****  Code generated by the R2CORBA IDL Compiler ****
# R2CORBA has been developed by:
#        Remedy IT
#        Nijkerk, GLD
#        The Netherlands
#        http://www.remedy.nl  http://www.theaceorb.nl
#

module R2CORBA

  CORBA.implement('tao/PortableServer/POA.pidl', {}, CORBA::IDL::CLIENT_STUB) {

  ## include
  CORBA.implement('tao/PortableServer/PS_Forward.pidl', {}, CORBA::IDL::CLIENT_STUB) {

  module PortableServer

    class ObjectId < CORBA::OctetSeq
      def ObjectId._tc; @@tc_ObjectId ||= CORBA::TypeCode::Alias.new('IDL:omg.org/PortableServer/ObjectId:1.0', 'ObjectId', self,CORBA::OctetSeq._tc); end
    end # typedef ObjectId
    module POA; end  ## interface forward
    class Servant; end  ## 'native' type
  end #of module PortableServer


  } ## end of include 'tao/PortableServer/PS_Forward.pidl'

  ## include
  CORBA.implement('tao/PortableServer/IdAssignmentPolicy.pidl', {}, CORBA::IDL::CLIENT_STUB) {

  module PortableServer

    class IdAssignmentPolicyValue < ::Fixnum
      def IdAssignmentPolicyValue._tc
        @@tc_IdAssignmentPolicyValue ||= CORBA::TypeCode::Enum.new('IDL:omg.org/PortableServer/IdAssignmentPolicyValue:1.0'.freeze, 'IdAssignmentPolicyValue', [
            'USER_ID',
            'SYSTEM_ID'])
      end
      self._tc  # register typecode
    end # enum IdAssignmentPolicyValue
    USER_ID = 0
    SYSTEM_ID = 1

    module IdAssignmentPolicy  ## interface

      include CORBA::Policy

      Id = 'IDL:omg.org/PortableServer/IdAssignmentPolicy:1.0'.freeze
      Ids = [ Id,
              CORBA::Policy::Id ].freeze

      def IdAssignmentPolicy._tc; @@tc_IdAssignmentPolicy ||= CORBA::TypeCode::ObjectRef.new(Id, 'IdAssignmentPolicy', self); end
      self._tc  # register typecode

      def IdAssignmentPolicy._narrow(obj)
        return CORBA::Stub.create_stub(obj)._unchecked_narrow!(self)
      end

      def IdAssignmentPolicy._duplicate(obj)
        obj
      end

      def _interface_repository_id
        self.class::Id
      end


      def value()
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented attribute on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of attribute get_value
    end #of interface IdAssignmentPolicy
  end #of module PortableServer


  } ## end of include 'tao/PortableServer/IdAssignmentPolicy.pidl'

  ## include
  CORBA.implement('tao/PortableServer/IdUniquenessPolicy.pidl', {}, CORBA::IDL::CLIENT_STUB) {

  module PortableServer

    class IdUniquenessPolicyValue < ::Fixnum
      def IdUniquenessPolicyValue._tc
        @@tc_IdUniquenessPolicyValue ||= CORBA::TypeCode::Enum.new('IDL:omg.org/PortableServer/IdUniquenessPolicyValue:1.0'.freeze, 'IdUniquenessPolicyValue', [
            'UNIQUE_ID',
            'MULTIPLE_ID'])
      end
      self._tc  # register typecode
    end # enum IdUniquenessPolicyValue
    UNIQUE_ID = 0
    MULTIPLE_ID = 1

    module IdUniquenessPolicy  ## interface

      include CORBA::Policy

      Id = 'IDL:omg.org/PortableServer/IdUniquenessPolicy:1.0'.freeze
      Ids = [ Id,
              CORBA::Policy::Id ].freeze

      def IdUniquenessPolicy._tc; @@tc_IdUniquenessPolicy ||= CORBA::TypeCode::ObjectRef.new(Id, 'IdUniquenessPolicy', self); end
      self._tc  # register typecode

      def IdUniquenessPolicy._narrow(obj)
        return CORBA::Stub.create_stub(obj)._unchecked_narrow!(self)
      end

      def IdUniquenessPolicy._duplicate(obj)
        obj
      end

      def _interface_repository_id
        self.class::Id
      end


      def value()
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented attribute on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of attribute get_value
    end #of interface IdUniquenessPolicy
  end #of module PortableServer


  } ## end of include 'tao/PortableServer/IdUniquenessPolicy.pidl'

  ## include
  CORBA.implement('tao/PortableServer/ImplicitActivationPolicy.pidl', {}, CORBA::IDL::CLIENT_STUB) {

  module PortableServer

    class ImplicitActivationPolicyValue < ::Fixnum
      def ImplicitActivationPolicyValue._tc
        @@tc_ImplicitActivationPolicyValue ||= CORBA::TypeCode::Enum.new('IDL:omg.org/PortableServer/ImplicitActivationPolicyValue:1.0'.freeze, 'ImplicitActivationPolicyValue', [
            'IMPLICIT_ACTIVATION',
            'NO_IMPLICIT_ACTIVATION'])
      end
      self._tc  # register typecode
    end # enum ImplicitActivationPolicyValue
    IMPLICIT_ACTIVATION = 0
    NO_IMPLICIT_ACTIVATION = 1

    module ImplicitActivationPolicy  ## interface

      include CORBA::Policy

      Id = 'IDL:omg.org/PortableServer/ImplicitActivationPolicy:1.0'.freeze
      Ids = [ Id,
              CORBA::Policy::Id ].freeze

      def ImplicitActivationPolicy._tc; @@tc_ImplicitActivationPolicy ||= CORBA::TypeCode::ObjectRef.new(Id, 'ImplicitActivationPolicy', self); end
      self._tc  # register typecode

      def ImplicitActivationPolicy._narrow(obj)
        return CORBA::Stub.create_stub(obj)._unchecked_narrow!(self)
      end

      def ImplicitActivationPolicy._duplicate(obj)
        obj
      end

      def _interface_repository_id
        self.class::Id
      end


      def value()
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented attribute on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of attribute get_value
    end #of interface ImplicitActivationPolicy
  end #of module PortableServer


  } ## end of include 'tao/PortableServer/ImplicitActivationPolicy.pidl'

  ## include
  CORBA.implement('tao/PortableServer/LifespanPolicy.pidl', {}, CORBA::IDL::CLIENT_STUB) {

  module PortableServer

    class LifespanPolicyValue < ::Fixnum
      def LifespanPolicyValue._tc
        @@tc_LifespanPolicyValue ||= CORBA::TypeCode::Enum.new('IDL:omg.org/PortableServer/LifespanPolicyValue:1.0'.freeze, 'LifespanPolicyValue', [
            'TRANSIENT',
            'PERSISTENT'])
      end
      self._tc  # register typecode
    end # enum LifespanPolicyValue
    TRANSIENT = 0
    PERSISTENT = 1

    module LifespanPolicy  ## interface

      include CORBA::Policy

      Id = 'IDL:omg.org/PortableServer/LifespanPolicy:1.0'.freeze
      Ids = [ Id,
              CORBA::Policy::Id ].freeze

      def LifespanPolicy._tc; @@tc_LifespanPolicy ||= CORBA::TypeCode::ObjectRef.new(Id, 'LifespanPolicy', self); end
      self._tc  # register typecode

      def LifespanPolicy._narrow(obj)
        return CORBA::Stub.create_stub(obj)._unchecked_narrow!(self)
      end

      def LifespanPolicy._duplicate(obj)
        obj
      end

      def _interface_repository_id
        self.class::Id
      end


      def value()
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented attribute on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of attribute get_value
    end #of interface LifespanPolicy
  end #of module PortableServer


  } ## end of include 'tao/PortableServer/LifespanPolicy.pidl'

  ## include
  CORBA.implement('tao/PortableServer/RequestProcessingPolicy.pidl', {}, CORBA::IDL::CLIENT_STUB) {

  module PortableServer

    class RequestProcessingPolicyValue < ::Fixnum
      def RequestProcessingPolicyValue._tc
        @@tc_RequestProcessingPolicyValue ||= CORBA::TypeCode::Enum.new('IDL:omg.org/PortableServer/RequestProcessingPolicyValue:1.0'.freeze, 'RequestProcessingPolicyValue', [
            'USE_ACTIVE_OBJECT_MAP_ONLY',
            'USE_DEFAULT_SERVANT',
            'USE_SERVANT_MANAGER'])
      end
      self._tc  # register typecode
    end # enum RequestProcessingPolicyValue
    USE_ACTIVE_OBJECT_MAP_ONLY = 0
    USE_DEFAULT_SERVANT = 1
    USE_SERVANT_MANAGER = 2

    module RequestProcessingPolicy  ## interface

      include CORBA::Policy

      Id = 'IDL:omg.org/PortableServer/RequestProcessingPolicy:1.0'.freeze
      Ids = [ Id,
              CORBA::Policy::Id ].freeze

      def RequestProcessingPolicy._tc; @@tc_RequestProcessingPolicy ||= CORBA::TypeCode::ObjectRef.new(Id, 'RequestProcessingPolicy', self); end
      self._tc  # register typecode

      def RequestProcessingPolicy._narrow(obj)
        return CORBA::Stub.create_stub(obj)._unchecked_narrow!(self)
      end

      def RequestProcessingPolicy._duplicate(obj)
        obj
      end

      def _interface_repository_id
        self.class::Id
      end


      def value()
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented attribute on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of attribute get_value
    end #of interface RequestProcessingPolicy
  end #of module PortableServer


  } ## end of include 'tao/PortableServer/RequestProcessingPolicy.pidl'

  ## include
  CORBA.implement('tao/PortableServer/ServantRetentionPolicy.pidl', {}, CORBA::IDL::CLIENT_STUB) {

  module PortableServer

    class ServantRetentionPolicyValue < ::Fixnum
      def ServantRetentionPolicyValue._tc
        @@tc_ServantRetentionPolicyValue ||= CORBA::TypeCode::Enum.new('IDL:omg.org/PortableServer/ServantRetentionPolicyValue:1.0'.freeze, 'ServantRetentionPolicyValue', [
            'RETAIN',
            'NON_RETAIN'])
      end
      self._tc  # register typecode
    end # enum ServantRetentionPolicyValue
    RETAIN = 0
    NON_RETAIN = 1

    module ServantRetentionPolicy  ## interface

      include CORBA::Policy

      Id = 'IDL:omg.org/PortableServer/ServantRetentionPolicy:1.0'.freeze
      Ids = [ Id,
              CORBA::Policy::Id ].freeze

      def ServantRetentionPolicy._tc; @@tc_ServantRetentionPolicy ||= CORBA::TypeCode::ObjectRef.new(Id, 'ServantRetentionPolicy', self); end
      self._tc  # register typecode

      def ServantRetentionPolicy._narrow(obj)
        return CORBA::Stub.create_stub(obj)._unchecked_narrow!(self)
      end

      def ServantRetentionPolicy._duplicate(obj)
        obj
      end

      def _interface_repository_id
        self.class::Id
      end


      def value()
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented attribute on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of attribute get_value
    end #of interface ServantRetentionPolicy
  end #of module PortableServer


  } ## end of include 'tao/PortableServer/ServantRetentionPolicy.pidl'

  ## include
  CORBA.implement('tao/PortableServer/ThreadPolicy.pidl', {}, CORBA::IDL::CLIENT_STUB) {

  module PortableServer

    class ThreadPolicyValue < ::Fixnum
      def ThreadPolicyValue._tc
        @@tc_ThreadPolicyValue ||= CORBA::TypeCode::Enum.new('IDL:omg.org/PortableServer/ThreadPolicyValue:1.0'.freeze, 'ThreadPolicyValue', [
            'ORB_CTRL_MODEL',
            'SINGLE_THREAD_MODEL'])
      end
      self._tc  # register typecode
    end # enum ThreadPolicyValue
    ORB_CTRL_MODEL = 0
    SINGLE_THREAD_MODEL = 1

    module ThreadPolicy  ## interface

      include CORBA::Policy

      Id = 'IDL:omg.org/PortableServer/ThreadPolicy:1.0'.freeze
      Ids = [ Id,
              CORBA::Policy::Id ].freeze

      def ThreadPolicy._tc; @@tc_ThreadPolicy ||= CORBA::TypeCode::ObjectRef.new(Id, 'ThreadPolicy', self); end
      self._tc  # register typecode

      def ThreadPolicy._narrow(obj)
        return CORBA::Stub.create_stub(obj)._unchecked_narrow!(self)
      end

      def ThreadPolicy._duplicate(obj)
        obj
      end

      def _interface_repository_id
        self.class::Id
      end


      def value()
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented attribute on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of attribute get_value
    end #of interface ThreadPolicy
  end #of module PortableServer


  } ## end of include 'tao/PortableServer/ThreadPolicy.pidl'

  module PortableServer

    class POAList < Array
      def POAList._tc
        @@tc_POAList ||= CORBA::TypeCode::Alias.new('IDL:omg.org/PortableServer/POAList:1.0', 'POAList', self,
          CORBA::TypeCode::Sequence.new(PortableServer::POA._tc).freeze)
      end
    end # typedef POAList
    THREAD_POLICY_ID = 16
    LIFESPAN_POLICY_ID = 17
    ID_UNIQUENESS_POLICY_ID = 18
    ID_ASSIGNMENT_POLICY_ID = 19
    IMPLICIT_ACTIVATION_POLICY_ID = 20
    SERVANT_RETENTION_POLICY_ID = 21
    REQUEST_PROCESSING_POLICY_ID = 22
    module POAManager; end  ## interface forward
    module POAManagerFactory; end  ## interface forward
    module AdapterActivator; end  ## interface forward
    module ServantManager; end  ## interface forward

    module POA  ## interface


      Id = 'IDL:omg.org/PortableServer/POA:2.3'.freeze
      Ids = [ Id ].freeze

      def POA._tc; @@tc_POA ||= CORBA::TypeCode::ObjectRef.new(Id, 'POA', self); end
      self._tc  # register typecode

      def POA._narrow(obj)
        return CORBA::Stub.create_stub(obj)._unchecked_narrow!(self)
      end

      def POA._duplicate(obj)
        obj
      end

      def _interface_repository_id
        self.class::Id
      end


      class AdapterAlreadyExists < CORBA::UserException

        def AdapterAlreadyExists._tc
          @@tc_AdapterAlreadyExists ||= CORBA::TypeCode::Except.new('IDL:omg.org/PortableServer/POA/AdapterAlreadyExists:1.0'.freeze, 'AdapterAlreadyExists', self)
        end
        self._tc  # register typecode
      end #of exception AdapterAlreadyExists

      class AdapterNonExistent < CORBA::UserException

        def AdapterNonExistent._tc
          @@tc_AdapterNonExistent ||= CORBA::TypeCode::Except.new('IDL:omg.org/PortableServer/POA/AdapterNonExistent:1.0'.freeze, 'AdapterNonExistent', self)
        end
        self._tc  # register typecode
      end #of exception AdapterNonExistent

      class InvalidPolicy < CORBA::UserException

        def InvalidPolicy._tc
          @@tc_InvalidPolicy ||= CORBA::TypeCode::Except.new('IDL:omg.org/PortableServer/POA/InvalidPolicy:1.0'.freeze, 'InvalidPolicy', self,
             [['index', CORBA._tc_ushort]])
        end
        self._tc  # register typecode
        attr_accessor :index
        def initialize(*param_)
          @index = param_
        end

      end #of exception InvalidPolicy

      class NoServant < CORBA::UserException

        def NoServant._tc
          @@tc_NoServant ||= CORBA::TypeCode::Except.new('IDL:omg.org/PortableServer/POA/NoServant:1.0'.freeze, 'NoServant', self)
        end
        self._tc  # register typecode
      end #of exception NoServant

      class ObjectAlreadyActive < CORBA::UserException

        def ObjectAlreadyActive._tc
          @@tc_ObjectAlreadyActive ||= CORBA::TypeCode::Except.new('IDL:omg.org/PortableServer/POA/ObjectAlreadyActive:1.0'.freeze, 'ObjectAlreadyActive', self)
        end
        self._tc  # register typecode
      end #of exception ObjectAlreadyActive

      class ObjectNotActive < CORBA::UserException

        def ObjectNotActive._tc
          @@tc_ObjectNotActive ||= CORBA::TypeCode::Except.new('IDL:omg.org/PortableServer/POA/ObjectNotActive:1.0'.freeze, 'ObjectNotActive', self)
        end
        self._tc  # register typecode
      end #of exception ObjectNotActive

      class ServantAlreadyActive < CORBA::UserException

        def ServantAlreadyActive._tc
          @@tc_ServantAlreadyActive ||= CORBA::TypeCode::Except.new('IDL:omg.org/PortableServer/POA/ServantAlreadyActive:1.0'.freeze, 'ServantAlreadyActive', self)
        end
        self._tc  # register typecode
      end #of exception ServantAlreadyActive

      class ServantNotActive < CORBA::UserException

        def ServantNotActive._tc
          @@tc_ServantNotActive ||= CORBA::TypeCode::Except.new('IDL:omg.org/PortableServer/POA/ServantNotActive:1.0'.freeze, 'ServantNotActive', self)
        end
        self._tc  # register typecode
      end #of exception ServantNotActive

      class WrongAdapter < CORBA::UserException

        def WrongAdapter._tc
          @@tc_WrongAdapter ||= CORBA::TypeCode::Except.new('IDL:omg.org/PortableServer/POA/WrongAdapter:1.0'.freeze, 'WrongAdapter', self)
        end
        self._tc  # register typecode
      end #of exception WrongAdapter

      class WrongPolicy < CORBA::UserException

        def WrongPolicy._tc
          @@tc_WrongPolicy ||= CORBA::TypeCode::Except.new('IDL:omg.org/PortableServer/POA/WrongPolicy:1.0'.freeze, 'WrongPolicy', self)
        end
        self._tc  # register typecode
      end #of exception WrongPolicy

      def create_POA(adapter_name, a_POAManager, policies)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation create_POA

      def find_POA(adapter_name, activate_it)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation find_POA

      def destroy(etherealize_objects, wait_for_completion)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation destroy

      def create_thread_policy(value)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation create_thread_policy

      def create_lifespan_policy(value)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation create_lifespan_policy

      def create_id_uniqueness_policy(value)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation create_id_uniqueness_policy

      def create_id_assignment_policy(value)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation create_id_assignment_policy

      def create_implicit_activation_policy(value)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation create_implicit_activation_policy

      def create_servant_retention_policy(value)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation create_servant_retention_policy

      def create_request_processing_policy(value)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation create_request_processing_policy

      def the_name()
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented attribute on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of attribute get_the_name

      def the_parent()
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented attribute on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of attribute get_the_parent

      def the_children()
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented attribute on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of attribute get_the_children

      def the_POAManager()
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented attribute on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of attribute get_the_POAManager

      def the_POAManagerFactory()
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented attribute on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of attribute get_the_POAManagerFactory

      def the_activator()
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented attribute on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of attribute get_the_activator
      def the_activator=(val)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented attribute on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of attribute set_the_activator

      def get_servant_manager()
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation get_servant_manager

      def set_servant_manager(imgr)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation set_servant_manager

      def get_servant()
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation get_servant

      def set_servant(p_servant)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation set_servant

      def activate_object(p_servant)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation activate_object

      def activate_object_with_id(r_id, p_servant)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation activate_object_with_id

      def deactivate_object(oid)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation deactivate_object

      def create_reference(intf)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation create_reference

      def create_reference_with_id(oid, intf)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation create_reference_with_id

      def servant_to_id(p_servant)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation servant_to_id

      def servant_to_reference(p_servant)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation servant_to_reference

      def reference_to_servant(reference)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation reference_to_servant

      def reference_to_id(reference)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation reference_to_id

      def id_to_servant(oid)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation id_to_servant

      def id_to_reference(oid)
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented operation on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of operation id_to_reference

      def r_id()
        raise ::CORBA::NO_IMPLEMENT.new(
                 'unimplemented attribute on local interface',
                 1, ::CORBA::COMPLETED_NO)
      end #of attribute get_id
    end #of interface POA
  end #of module PortableServer

  } ## end of 'tao/PortableServer/POA.pidl'
end #of module R2CORBA

# -*- END -*-
