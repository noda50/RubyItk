#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "parser.ry".
#

require 'racc/parser'


require 'ridl/delegate.rb'

module IDL


class Parser < Racc::Parser

module_eval <<'..end parser.ry modeval..id897fc5dd2a', 'parser.ry', 530

def parse_type_declarator(type_spec, declarators)
  ret = Array.new
  t = type_spec
  declarators.each do |d|
    case d
    when ::String
      ret << [t, d]
    when ::Array # array_declarator -> [identifier, size]
      ret << [IDL::Type::Array.new(t, d[1]), d[0]]
    else
      raise RuntimeError, "unknown declarator: #{d.inspect}"
    end
  end
  ret
end

#attr_accessor :default_namespace, :output
attr_accessor :yydebug
def initialize(params = {})
  @d = ::IDL::Delegator.new(params)
  @params = params
end
def add_walker(w)
  @d.add_walker(w)
end

alias on_error0 on_error
def on_error(err_tok, err_val, _value)
  begin
    on_error0(err_tok, err_val, _value)
  rescue IDL::ParseError
    raise
  rescue
    raise IDL::ParseError.new($!.message, @scanner.positions)
  end
end

def parse(src)
  @scanner = Scanner.new(src, self, @params)
  @d.pre_parse
  begin
    do_parse
  rescue IDL::ParseError
    raise
  rescue
#StandardError, Racc::ParseError
#    $!.class.class_eval { attr_accessor :positions }
#    $!.extend IDL::ParseError
#    $!.positions = @scanner.positions

#    pos = @scanner.positions.collect { |p|
#      format("%s:%d,%d", p.name, p.line, p.column)
#    }
#    $!.set_backtrace($!.backtrace + pos)
    raise IDL::ParseError.new($!.message, @scanner.positions)
  end
  @d.post_parse
end

def pragma_prefix(s)
  @d.pragma_prefix(s)
end

def pragma_version(id, major, minor)
  @d.pragma_version(id, major, minor)
end

def pragma_id(id, repo_id)
  @d.pragma_id(id, repo_id)
end

def is_included?(s)
  @d.is_included?(s)
end

def enter_include(s)
  @d.enter_include(s)
end

def leave_include()
  @d.leave_include
end

def declare_include(s)
  @d.declare_include(s)
end

def next_token
  ret = @scanner.next_token
end

..end parser.ry modeval..id897fc5dd2a

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 85, :_reduce_none,
 2, 85, :_reduce_none,
 2, 86, :_reduce_none,
 2, 86, :_reduce_none,
 2, 86, :_reduce_none,
 2, 86, :_reduce_none,
 2, 86, :_reduce_none,
 2, 86, :_reduce_none,
 2, 86, :_reduce_none,
 2, 86, :_reduce_none,
 0, 86, :_reduce_none,
 4, 91, :_reduce_12,
 2, 95, :_reduce_13,
 1, 96, :_reduce_none,
 2, 96, :_reduce_none,
 1, 90, :_reduce_none,
 1, 90, :_reduce_none,
 2, 98, :_reduce_18,
 2, 98, :_reduce_19,
 2, 98, :_reduce_20,
 4, 97, :_reduce_21,
 3, 102, :_reduce_22,
 2, 102, :_reduce_23,
 3, 102, :_reduce_24,
 2, 102, :_reduce_25,
 3, 102, :_reduce_26,
 2, 102, :_reduce_27,
 2, 99, :_reduce_28,
 2, 100, :_reduce_29,
 1, 101, :_reduce_30,
 1, 103, :_reduce_none,
 2, 103, :_reduce_none,
 2, 105, :_reduce_none,
 2, 105, :_reduce_none,
 2, 105, :_reduce_none,
 2, 105, :_reduce_none,
 2, 105, :_reduce_none,
 2, 105, :_reduce_none,
 2, 105, :_reduce_none,
 0, 105, :_reduce_none,
 2, 104, :_reduce_41,
 1, 108, :_reduce_42,
 3, 108, :_reduce_43,
 1, 109, :_reduce_none,
 1, 110, :_reduce_45,
 1, 111, :_reduce_46,
 2, 111, :_reduce_47,
 3, 111, :_reduce_48,
 1, 92, :_reduce_none,
 1, 92, :_reduce_none,
 1, 92, :_reduce_none,
 1, 92, :_reduce_none,
 3, 115, :_reduce_53,
 2, 115, :_reduce_54,
 3, 114, :_reduce_55,
 4, 113, :_reduce_56,
 3, 117, :_reduce_57,
 4, 117, :_reduce_58,
 1, 118, :_reduce_none,
 2, 118, :_reduce_none,
 4, 112, :_reduce_none,
 1, 121, :_reduce_none,
 2, 121, :_reduce_none,
 4, 120, :_reduce_64,
 3, 120, :_reduce_65,
 3, 120, :_reduce_66,
 2, 120, :_reduce_67,
 2, 119, :_reduce_68,
 1, 119, :_reduce_69,
 1, 119, :_reduce_70,
 3, 123, :_reduce_71,
 2, 123, :_reduce_72,
 2, 124, :_reduce_73,
 1, 125, :_reduce_none,
 3, 125, :_reduce_none,
 1, 126, :_reduce_none,
 1, 122, :_reduce_none,
 1, 122, :_reduce_none,
 1, 122, :_reduce_none,
 4, 127, :_reduce_none,
 4, 127, :_reduce_none,
 5, 128, :_reduce_none,
 6, 128, :_reduce_none,
 1, 130, :_reduce_none,
 3, 130, :_reduce_none,
 3, 131, :_reduce_none,
 1, 132, :_reduce_none,
 3, 94, :_reduce_88,
 3, 93, :_reduce_89,
 5, 88, :_reduce_90,
 1, 135, :_reduce_none,
 1, 135, :_reduce_none,
 1, 135, :_reduce_none,
 1, 135, :_reduce_none,
 1, 135, :_reduce_none,
 1, 135, :_reduce_none,
 1, 135, :_reduce_none,
 1, 135, :_reduce_none,
 1, 135, :_reduce_none,
 1, 135, :_reduce_none,
 1, 136, :_reduce_none,
 1, 146, :_reduce_none,
 3, 146, :_reduce_103,
 1, 147, :_reduce_none,
 3, 147, :_reduce_105,
 1, 148, :_reduce_none,
 3, 148, :_reduce_107,
 1, 149, :_reduce_none,
 3, 149, :_reduce_109,
 3, 149, :_reduce_110,
 1, 150, :_reduce_none,
 3, 150, :_reduce_112,
 3, 150, :_reduce_113,
 1, 151, :_reduce_none,
 3, 151, :_reduce_115,
 3, 151, :_reduce_116,
 3, 151, :_reduce_117,
 2, 152, :_reduce_118,
 1, 152, :_reduce_none,
 1, 153, :_reduce_120,
 1, 153, :_reduce_121,
 1, 153, :_reduce_122,
 1, 154, :_reduce_none,
 1, 154, :_reduce_none,
 3, 154, :_reduce_none,
 1, 155, :_reduce_126,
 1, 155, :_reduce_127,
 1, 155, :_reduce_128,
 1, 155, :_reduce_129,
 1, 155, :_reduce_130,
 1, 155, :_reduce_131,
 1, 155, :_reduce_132,
 1, 155, :_reduce_133,
 1, 156, :_reduce_134,
 1, 156, :_reduce_135,
 1, 157, :_reduce_136,
 2, 87, :_reduce_none,
 1, 87, :_reduce_none,
 1, 87, :_reduce_none,
 1, 87, :_reduce_none,
 1, 87, :_reduce_none,
 1, 87, :_reduce_none,
 2, 87, :_reduce_none,
 2, 158, :_reduce_144,
 1, 116, :_reduce_none,
 1, 116, :_reduce_none,
 1, 165, :_reduce_none,
 1, 165, :_reduce_none,
 1, 165, :_reduce_none,
 1, 167, :_reduce_none,
 1, 167, :_reduce_none,
 1, 167, :_reduce_none,
 1, 167, :_reduce_none,
 1, 167, :_reduce_none,
 1, 167, :_reduce_none,
 1, 167, :_reduce_none,
 1, 167, :_reduce_none,
 1, 167, :_reduce_none,
 1, 168, :_reduce_none,
 1, 168, :_reduce_none,
 1, 168, :_reduce_none,
 1, 168, :_reduce_none,
 1, 166, :_reduce_none,
 1, 166, :_reduce_none,
 1, 166, :_reduce_none,
 1, 129, :_reduce_166,
 3, 129, :_reduce_167,
 1, 174, :_reduce_none,
 1, 174, :_reduce_none,
 1, 164, :_reduce_170,
 1, 134, :_reduce_none,
 1, 175, :_reduce_none,
 1, 141, :_reduce_173,
 1, 141, :_reduce_174,
 2, 141, :_reduce_175,
 1, 137, :_reduce_none,
 1, 137, :_reduce_none,
 1, 177, :_reduce_none,
 1, 177, :_reduce_none,
 1, 177, :_reduce_none,
 1, 179, :_reduce_181,
 1, 180, :_reduce_182,
 2, 181, :_reduce_183,
 1, 178, :_reduce_none,
 1, 178, :_reduce_none,
 1, 178, :_reduce_none,
 2, 182, :_reduce_187,
 2, 183, :_reduce_188,
 3, 184, :_reduce_189,
 1, 138, :_reduce_190,
 1, 139, :_reduce_191,
 1, 140, :_reduce_192,
 1, 145, :_reduce_193,
 1, 169, :_reduce_194,
 1, 170, :_reduce_195,
 2, 160, :_reduce_196,
 4, 159, :_reduce_197,
 2, 186, :_reduce_198,
 1, 185, :_reduce_199,
 1, 187, :_reduce_none,
 2, 187, :_reduce_none,
 3, 188, :_reduce_202,
 2, 162, :_reduce_203,
 4, 161, :_reduce_204,
 3, 190, :_reduce_205,
 1, 189, :_reduce_206,
 4, 192, :_reduce_207,
 1, 193, :_reduce_none,
 1, 193, :_reduce_none,
 1, 193, :_reduce_none,
 1, 193, :_reduce_none,
 1, 193, :_reduce_none,
 1, 191, :_reduce_none,
 2, 191, :_reduce_none,
 3, 194, :_reduce_215,
 1, 195, :_reduce_216,
 2, 195, :_reduce_217,
 3, 197, :_reduce_218,
 2, 197, :_reduce_219,
 2, 196, :_reduce_220,
 2, 163, :_reduce_221,
 2, 198, :_reduce_222,
 3, 199, :_reduce_none,
 1, 200, :_reduce_none,
 3, 200, :_reduce_none,
 1, 201, :_reduce_226,
 6, 172, :_reduce_227,
 4, 172, :_reduce_228,
 4, 142, :_reduce_229,
 1, 142, :_reduce_230,
 4, 143, :_reduce_231,
 1, 143, :_reduce_232,
 2, 176, :_reduce_233,
 1, 202, :_reduce_234,
 2, 202, :_reduce_235,
 3, 203, :_reduce_236,
 4, 106, :_reduce_237,
 3, 106, :_reduce_238,
 1, 204, :_reduce_239,
 3, 204, :_reduce_240,
 2, 89, :_reduce_241,
 2, 205, :_reduce_242,
 3, 206, :_reduce_none,
 0, 207, :_reduce_none,
 2, 207, :_reduce_none,
 3, 107, :_reduce_none,
 3, 208, :_reduce_247,
 2, 208, :_reduce_248,
 1, 209, :_reduce_none,
 2, 210, :_reduce_250,
 1, 210, :_reduce_251,
 1, 210, :_reduce_252,
 0, 210, :_reduce_253,
 1, 211, :_reduce_254,
 1, 212, :_reduce_255,
 1, 212, :_reduce_256,
 2, 213, :_reduce_none,
 3, 213, :_reduce_none,
 1, 216, :_reduce_none,
 3, 216, :_reduce_none,
 3, 217, :_reduce_261,
 1, 218, :_reduce_262,
 1, 218, :_reduce_263,
 1, 218, :_reduce_264,
 4, 214, :_reduce_265,
 1, 219, :_reduce_266,
 3, 219, :_reduce_267,
 4, 215, :_reduce_268,
 1, 220, :_reduce_269,
 3, 220, :_reduce_270,
 1, 133, :_reduce_271,
 1, 133, :_reduce_272,
 1, 133, :_reduce_273,
 1, 133, :_reduce_274,
 6, 173, :_reduce_none,
 1, 144, :_reduce_none,
 1, 171, :_reduce_277 ]

racc_reduce_n = 278

racc_shift_n = 431

racc_action_table = [
   -67,   246,   347,    57,   424,   419,   422,   167,   365,    55,
   -57,   371,   365,   164,   425,   420,   423,   167,   399,   330,
    57,   408,   373,   164,   407,   -23,    55,   -27,   400,   244,
   286,   286,   155,   286,   155,   234,   314,    57,    57,    57,
   361,   362,   233,    55,    55,    55,    89,    95,   100,   105,
   109,   112,    66,    70,    74,    79,    83,    23,    28,   348,
   171,   173,    45,    65,   366,   367,    78,    82,   366,   367,
   -25,   146,   167,   340,   341,   342,   145,   155,   164,    87,
    93,    89,    95,   100,   105,   109,   112,    66,    70,    74,
    79,    83,    23,    28,    57,   336,   337,    45,    65,   293,
    55,    78,    82,   317,    57,    57,   294,    57,   270,   295,
    55,    55,   257,    55,    87,    93,   231,   232,   225,   296,
    57,   297,     4,   298,    14,    20,    55,   263,   265,   267,
   269,   272,   248,   252,   255,    57,    57,    57,    57,   171,
   173,    55,    55,    55,    55,   287,    13,    19,    89,    95,
   100,   105,   109,   112,    66,    70,    74,    79,    83,    23,
    28,   186,   187,   307,    45,    57,   189,   190,    78,    82,
   300,    55,   209,   210,    39,   194,   195,   406,   402,   141,
   338,   339,    93,   303,    26,   304,    34,    37,    42,   340,
   341,   342,     8,    15,   340,   341,   342,   336,   337,   305,
    57,   286,     4,   284,    14,    20,    55,   161,    89,    95,
   100,   105,   109,   112,    66,    70,    74,    79,    83,    23,
    28,   338,   339,   277,    45,    65,    13,    19,    78,    82,
   308,   164,    57,   338,   339,   182,   316,   239,    55,    23,
    28,    87,    93,   238,    45,   327,   105,   109,   112,     4,
    70,    14,    20,   221,    39,   153,   322,  -198,   322,    45,
   330,   220,   332,   333,   334,   335,   214,   192,   191,   188,
   182,   182,   346,    13,    19,    89,    95,   100,   105,   109,
   112,    66,    70,    74,    79,    83,    23,    28,   179,   349,
   350,    45,   351,   284,   178,    78,    82,   182,   355,   209,
   210,    39,   194,   195,   291,   177,    57,   359,   176,    93,
   175,   161,    55,   158,   374,   182,   182,   157,   378,   187,
   156,   290,   153,     4,   150,    14,    20,   149,   148,   147,
   144,   143,   140,   139,   138,   390,   136,   135,   393,   359,
   395,   396,   397,   362,   134,   133,   132,    13,    19,    89,
    95,   100,   105,   109,   112,    66,    70,    74,    79,    83,
    23,    28,    57,   118,   117,    45,   334,   335,    55,    78,
    82,   116,   115,   209,   210,    39,   194,   195,    64,    63,
    62,   409,   410,    93,    57,   395,   359,    61,   415,    60,
    55,   359,    59,    58,   421,    53,    52,   359,   402,   428,
    51,   430,   nil,   nil,   nil,    89,    95,   100,   105,   109,
   112,    66,    70,    74,    79,    83,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    78,    82,    89,    95,   100,
   105,   109,   112,    66,    70,    74,    79,    83,   nil,    93,
    57,   nil,   nil,   nil,    65,   nil,    55,    78,    82,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    87,    93,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    57,   nil,   nil,   nil,   nil,
   nil,    55,   nil,    89,    95,   100,   105,   109,   112,    66,
    70,    74,    79,    83,    23,    28,   nil,   171,   173,    45,
    65,   nil,   nil,    78,    82,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    87,    93,    89,    95,
   100,   105,   109,   112,    66,    70,    74,    79,    83,    23,
    28,    57,   nil,   nil,    45,    65,   nil,    55,    78,    82,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    87,    93,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    57,   nil,   nil,   nil,
   nil,   nil,    55,   nil,    89,    95,   100,   105,   109,   112,
    66,    70,    74,    79,    83,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    78,    82,   nil,   nil,   nil,   nil,
   nil,    57,   nil,   nil,   nil,   nil,   nil,    55,    93,    89,
    95,   100,   105,   109,   112,    66,    70,    74,    79,    83,
    23,    28,   nil,   nil,   nil,    45,    65,   nil,   nil,    78,
    82,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    87,    93,    89,    95,   100,   105,   109,   112,
    66,    70,    74,    79,    83,   nil,    57,   nil,   nil,   nil,
   nil,   nil,    55,   nil,    78,    82,   nil,   231,   232,   225,
   nil,   nil,   195,     4,   nil,    14,    20,   nil,    93,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    13,    19,    89,
    95,   100,   105,   109,   112,    66,    70,    74,    79,    83,
    23,    28,    57,   nil,   nil,    45,   nil,   nil,    55,    78,
    82,   nil,   nil,   209,   210,    39,   194,   195,   nil,   nil,
   nil,   nil,   nil,    93,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    89,    95,   100,   105,   109,
   112,    66,    70,    74,    79,    83,    23,    28,    57,   nil,
   nil,    45,    65,    57,    55,    78,    82,   nil,   nil,    55,
   nil,   nil,   270,   nil,   nil,   nil,   257,   nil,    87,    93,
     4,   nil,    14,    20,   nil,   250,   254,   nil,   nil,   nil,
   261,   263,   265,   267,   269,   272,   248,   252,   255,   nil,
   nil,   nil,   nil,   nil,    13,    19,    89,    95,   100,   105,
   109,   112,    66,    70,    74,    79,    83,    23,    28,    57,
   nil,   nil,    45,   nil,   nil,    55,    78,    82,   nil,   nil,
   209,   210,    39,   194,   195,   nil,   nil,   nil,   nil,   nil,
    93,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    89,    95,   100,   105,   109,   112,    66,    70,
    74,    79,    83,    57,   nil,   nil,   nil,   nil,   nil,    55,
   nil,   nil,    78,    82,   nil,   nil,   nil,   nil,   nil,   nil,
     4,   nil,    14,    20,   nil,   nil,    93,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    13,    19,    89,    95,   100,   105,
   109,   112,    66,    70,    74,    79,    83,    23,    28,    57,
   nil,   nil,    45,   nil,   nil,    55,    78,    82,   nil,   nil,
   209,   210,    39,   194,   195,   nil,   nil,   nil,   nil,   nil,
    93,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    57,   nil,   nil,   nil,   nil,   nil,
    55,   nil,    89,    95,   100,   105,   109,   112,    66,    70,
    74,    79,    83,   nil,   nil,   nil,   nil,   nil,    57,   nil,
   nil,   nil,    78,    82,    55,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    93,    89,    95,   100,
   105,   109,   112,    66,    70,    74,    79,    83,    23,    28,
   nil,   nil,   nil,    45,    65,   nil,   nil,    78,    82,   nil,
   nil,    89,    95,   100,   105,   109,   112,    66,    70,    74,
    87,    93,   nil,   nil,   310,    26,   nil,    34,    37,    42,
   nil,    78,    82,     8,    15,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     4,   125,    14,    20,   nil,   nil,   nil,
   nil,    26,   nil,    34,    37,    42,   nil,   nil,   nil,     8,
    15,   nil,   nil,   nil,   nil,   nil,   nil,    13,    19,     4,
   nil,    14,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    23,    28,   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    13,    19,    39,    26,   nil,    34,    37,
    42,   nil,   nil,   nil,     8,    15,    23,    28,   nil,    57,
   nil,    45,   nil,   nil,     4,    55,    14,    20,   nil,   nil,
   nil,    39,   nil,   270,   nil,   nil,   nil,   257,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   250,   254,    13,    19,
   nil,   261,   263,   265,   267,   269,   272,   248,   252,   255,
   nil,    23,    28,    57,   nil,   nil,    45,   nil,   nil,    55,
   nil,   nil,   nil,   nil,   nil,   nil,    39,   270,   nil,   nil,
   nil,   257,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   250,   254,   nil,   nil,   nil,   261,   263,   265,   267,   269,
   272,   248,   252,   255,    57,   nil,   nil,   nil,   nil,   nil,
    55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   270,   nil,
   nil,   nil,   257,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   250,   254,   nil,   nil,   nil,   261,   263,   265,   267,
   269,   272,   248,   252,   255,    57,   nil,   nil,   nil,   nil,
   nil,    55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   270,
   nil,   nil,   nil,   257,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   250,   254,   nil,   nil,   nil,   261,   263,   265,
   267,   269,   272,   248,   252,   255,    57,   nil,   nil,   nil,
   nil,   nil,    55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   270,   nil,   nil,   nil,   257,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   250,   254,   nil,   nil,   nil,   261,   263,
   265,   267,   269,   272,   248,   252,   255,    57,   nil,   nil,
   nil,   nil,   nil,    55,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   270,   nil,   nil,   nil,   257,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   250,   254,   nil,   nil,   nil,   261,
   263,   265,   267,   269,   272,   248,   252,   255,    57,   nil,
   nil,   nil,   nil,   nil,    55,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   270,   nil,   nil,   nil,   257,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   250,   254,   nil,   nil,   nil,
   261,   263,   265,   267,   269,   272,   248,   252,   255,    57,
   nil,   nil,   nil,   nil,   nil,    55,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   270,   nil,   nil,   nil,   257,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   250,   254,   nil,   nil,
   nil,   261,   263,   265,   267,   269,   272,   248,   252,   255,
    57,   nil,   nil,   nil,   nil,   nil,    55,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   270,   nil,   nil,   nil,   257,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   250,   254,   nil,
   nil,   nil,   261,   263,   265,   267,   269,   272,   248,   252,
   255,    57,   nil,   nil,   nil,   nil,   nil,    55,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   270,   nil,   nil,   nil,   257,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   250,   254,
   nil,   nil,   nil,   261,   263,   265,   267,   269,   272,   248,
   252,   255,    57,   nil,   nil,   nil,   nil,   nil,    55,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   270,   nil,   nil,   nil,
   257,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   250,
   254,   nil,   nil,   nil,   261,   263,   265,   267,   269,   272,
   248,   252,   255,    57,   nil,   nil,   nil,   nil,   nil,    55,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   270,   nil,   nil,
   nil,   257,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   250,   254,   nil,   nil,   nil,   261,   263,   265,   267,   269,
   272,   248,   252,   255,    57,   nil,   nil,   nil,   nil,   nil,
    55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   270,   nil,
   nil,   nil,   257,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   250,   254,   nil,   nil,   nil,   261,   263,   265,   267,
   269,   272,   248,   252,   255,    57,   nil,   nil,   nil,   nil,
   nil,    55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   270,
   nil,   nil,   nil,   257,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   250,   254,   nil,   nil,   nil,   261,   263,   265,
   267,   269,   272,   248,   252,   255,    57,   nil,   nil,   nil,
   nil,   nil,    55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   270,   nil,   nil,   nil,   257,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   250,   254,   nil,   nil,   nil,   261,   263,
   265,   267,   269,   272,   248,   252,   255,    57,   nil,   nil,
   nil,   nil,   nil,    55,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   270,   nil,   nil,   nil,   257,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   250,   254,   nil,   nil,   nil,   261,
   263,   265,   267,   269,   272,   248,   252,   255,    57,   nil,
   nil,   nil,   nil,   nil,    55,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   270,   nil,   nil,   nil,   257,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   250,   254,   nil,   nil,   nil,
   261,   263,   265,   267,   269,   272,   248,   252,   255,    57,
   nil,   nil,   nil,   nil,   nil,    55,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   270,   nil,   nil,   nil,   257,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   250,   254,   nil,   nil,
   nil,   261,   263,   265,   267,   269,   272,   248,   252,   255 ]

racc_action_check = [
    61,   169,   278,    61,   414,   404,   413,    61,   399,    61,
   221,   303,   303,    61,   414,   404,   413,   221,   368,   331,
   167,   376,   315,   221,   375,    52,   167,    62,   368,   167,
   376,   315,    52,   375,    62,   151,   222,    14,   222,   422,
   301,   301,   151,    14,   222,   422,    61,    61,    61,    61,
    61,    61,    61,    61,    61,    61,    61,    61,    61,   278,
   169,   169,    61,    61,   399,   399,    61,    61,   303,   303,
    58,    42,   192,   385,   385,   385,    42,    58,   192,    61,
    61,   222,   222,   222,   222,   222,   222,   222,   222,   222,
   222,   222,   222,   222,   273,   264,   264,   222,   222,   202,
   273,   222,   222,   226,   155,   226,   203,   244,   273,   204,
   155,   226,   273,   244,   222,   222,   226,   226,   226,   205,
   322,   206,   226,   209,   226,   226,   322,   273,   273,   273,
   273,   273,   273,   273,   273,   396,     4,   330,   164,    64,
    64,   396,     4,   330,   164,   189,   226,   226,   226,   226,
   226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
   226,   100,   100,   215,   226,   215,   109,   109,   226,   226,
   211,   215,   226,   226,   226,   226,   226,   374,   374,    38,
   384,   384,   226,   212,    38,   213,    38,    38,    38,   386,
   386,   386,    38,    38,   268,   268,   268,   382,   382,   214,
   239,   183,    38,   182,    38,    38,   239,   176,   215,   215,
   215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
   215,   383,   383,   173,   215,   215,    38,    38,   215,   215,
   216,   162,   216,   266,   266,   224,   225,   161,   216,    38,
    38,   215,   215,   158,    38,   239,   239,   239,   239,   216,
   239,   216,   216,   145,    38,   233,   236,   144,   241,   239,
   243,   141,   258,   259,   260,   262,   124,   115,   114,   108,
    98,   274,   275,   216,   216,   216,   216,   216,   216,   216,
   216,   216,   216,   216,   216,   216,   216,   216,    87,   279,
   281,   216,   282,   283,    82,   216,   216,   286,   289,   216,
   216,   216,   216,   216,   198,    78,   198,   299,    73,   216,
    65,    60,   198,    56,   316,   319,   320,    55,   326,   327,
    54,   197,    51,   198,    49,   198,   198,    47,    46,    45,
    40,    39,    35,    34,    33,   343,    31,    30,   353,   356,
   358,   361,   362,   363,    27,    26,    22,   198,   198,   198,
   198,   198,   198,   198,   198,   198,   198,   198,   198,   198,
   198,   198,   403,    19,    18,   198,   380,   381,   403,   198,
   198,    17,    15,   198,   198,   198,   198,   198,    12,    11,
    10,   391,   392,   198,   175,   394,   395,     8,   397,     7,
   175,   401,     6,     5,   406,     3,     2,   418,   419,   420,
     1,   424,   nil,   nil,   nil,   403,   403,   403,   403,   403,
   403,   403,   403,   403,   403,   403,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   403,   403,   175,   175,   175,
   175,   175,   175,   175,   175,   175,   175,   175,   nil,   403,
   172,   nil,   nil,   nil,   175,   nil,   172,   175,   175,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   175,   175,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    13,   nil,   nil,   nil,   nil,
   nil,    13,   nil,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   172,   172,   172,   nil,   172,   172,   172,
   172,   nil,   nil,   172,   172,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   172,   172,    13,    13,
    13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
    13,   210,   nil,   nil,    13,    13,   nil,   210,    13,    13,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    13,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   231,   nil,   nil,   nil,
   nil,   nil,   231,   nil,   210,   210,   210,   210,   210,   210,
   210,   210,   210,   210,   210,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   210,   210,   nil,   nil,   nil,   nil,
   nil,   196,   nil,   nil,   nil,   nil,   nil,   196,   210,   231,
   231,   231,   231,   231,   231,   231,   231,   231,   231,   231,
   231,   231,   nil,   nil,   nil,   231,   231,   nil,   nil,   231,
   231,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   231,   231,   196,   196,   196,   196,   196,   196,
   196,   196,   196,   196,   196,   nil,   149,   nil,   nil,   nil,
   nil,   nil,   149,   nil,   196,   196,   nil,   149,   149,   149,
   nil,   nil,   196,   149,   nil,   149,   149,   nil,   196,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   149,   149,   149,
   149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   148,   nil,   nil,   149,   nil,   nil,   148,   149,
   149,   nil,   nil,   149,   149,   149,   149,   149,   nil,   nil,
   nil,   nil,   nil,   149,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   148,   148,   148,   148,   148,
   148,   148,   148,   148,   148,   148,   148,   148,   177,   nil,
   nil,   148,   148,   116,   177,   148,   148,   nil,   nil,   116,
   nil,   nil,   177,   nil,   nil,   nil,   177,   nil,   148,   148,
   116,   nil,   116,   116,   nil,   177,   177,   nil,   nil,   nil,
   177,   177,   177,   177,   177,   177,   177,   177,   177,   nil,
   nil,   nil,   nil,   nil,   116,   116,   116,   116,   116,   116,
   116,   116,   116,   116,   116,   116,   116,   116,   116,   298,
   nil,   nil,   116,   nil,   nil,   298,   116,   116,   nil,   nil,
   116,   116,   116,   116,   116,   nil,   nil,   nil,   nil,   nil,
   116,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   298,   298,   298,   298,   298,   298,   298,   298,
   298,   298,   298,   138,   nil,   nil,   nil,   nil,   nil,   138,
   nil,   nil,   298,   298,   nil,   nil,   nil,   nil,   nil,   nil,
   138,   nil,   138,   138,   nil,   nil,   298,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   138,   138,   138,   138,   138,   138,
   138,   138,   138,   138,   138,   138,   138,   138,   138,   370,
   nil,   nil,   138,   nil,   nil,   370,   138,   138,   nil,   nil,
   138,   138,   138,   138,   138,   nil,   nil,   nil,   nil,   nil,
   138,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   232,   nil,   nil,   nil,   nil,   nil,
   232,   nil,   370,   370,   370,   370,   370,   370,   370,   370,
   370,   370,   370,   nil,   nil,   nil,   nil,   nil,    20,   nil,
   nil,   nil,   370,   370,    20,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   370,   232,   232,   232,
   232,   232,   232,   232,   232,   232,   232,   232,   232,   232,
   nil,   nil,   nil,   232,   232,   nil,   nil,   232,   232,   nil,
   nil,    20,    20,    20,    20,    20,    20,    20,    20,    20,
   232,   232,   nil,   nil,   218,   218,   nil,   218,   218,   218,
   nil,    20,    20,   218,   218,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   218,    20,   218,   218,   nil,   nil,   nil,
   nil,   140,   nil,   140,   140,   140,   nil,   nil,   nil,   140,
   140,   nil,   nil,   nil,   nil,   nil,   nil,   218,   218,   140,
   nil,   140,   140,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   218,   218,   nil,   nil,   nil,   218,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   140,   140,   218,     0,   nil,     0,     0,
     0,   nil,   nil,   nil,     0,     0,   140,   140,   nil,   337,
   nil,   140,   nil,   nil,     0,   337,     0,     0,   nil,   nil,
   nil,   140,   nil,   337,   nil,   nil,   nil,   337,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   337,   337,     0,     0,
   nil,   337,   337,   337,   337,   337,   337,   337,   337,   337,
   nil,     0,     0,   336,   nil,   nil,     0,   nil,   nil,   336,
   nil,   nil,   nil,   nil,   nil,   nil,     0,   336,   nil,   nil,
   nil,   336,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   336,   336,   nil,   nil,   nil,   336,   336,   336,   336,   336,
   336,   336,   336,   336,   335,   nil,   nil,   nil,   nil,   nil,
   335,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   335,   nil,
   nil,   nil,   335,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   335,   335,   nil,   nil,   nil,   335,   335,   335,   335,
   335,   335,   335,   335,   335,   334,   nil,   nil,   nil,   nil,
   nil,   334,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   334,
   nil,   nil,   nil,   334,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   334,   334,   nil,   nil,   nil,   334,   334,   334,
   334,   334,   334,   334,   334,   334,   332,   nil,   nil,   nil,
   nil,   nil,   332,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   332,   nil,   nil,   nil,   332,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   332,   332,   nil,   nil,   nil,   332,   332,
   332,   332,   332,   332,   332,   332,   332,   341,   nil,   nil,
   nil,   nil,   nil,   341,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   341,   nil,   nil,   nil,   341,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   341,   341,   nil,   nil,   nil,   341,
   341,   341,   341,   341,   341,   341,   341,   341,   179,   nil,
   nil,   nil,   nil,   nil,   179,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   179,   nil,   nil,   nil,   179,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   179,   179,   nil,   nil,   nil,
   179,   179,   179,   179,   179,   179,   179,   179,   179,   178,
   nil,   nil,   nil,   nil,   nil,   178,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   178,   nil,   nil,   nil,   178,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   178,   178,   nil,   nil,
   nil,   178,   178,   178,   178,   178,   178,   178,   178,   178,
   270,   nil,   nil,   nil,   nil,   nil,   270,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   270,   nil,   nil,   nil,   270,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   270,   270,   nil,
   nil,   nil,   270,   270,   270,   270,   270,   270,   270,   270,
   270,   338,   nil,   nil,   nil,   nil,   nil,   338,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   338,   nil,   nil,   nil,   338,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   338,   338,
   nil,   nil,   nil,   338,   338,   338,   338,   338,   338,   338,
   338,   338,   305,   nil,   nil,   nil,   nil,   nil,   305,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   305,   nil,   nil,   nil,
   305,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   305,
   305,   nil,   nil,   nil,   305,   305,   305,   305,   305,   305,
   305,   305,   305,   340,   nil,   nil,   nil,   nil,   nil,   340,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   340,   nil,   nil,
   nil,   340,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   340,   340,   nil,   nil,   nil,   340,   340,   340,   340,   340,
   340,   340,   340,   340,   171,   nil,   nil,   nil,   nil,   nil,
   171,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   171,   nil,
   nil,   nil,   171,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   171,   171,   nil,   nil,   nil,   171,   171,   171,   171,
   171,   171,   171,   171,   171,   339,   nil,   nil,   nil,   nil,
   nil,   339,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   339,
   nil,   nil,   nil,   339,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   339,   339,   nil,   nil,   nil,   339,   339,   339,
   339,   339,   339,   339,   339,   339,   342,   nil,   nil,   nil,
   nil,   nil,   342,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   342,   nil,   nil,   nil,   342,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   342,   342,   nil,   nil,   nil,   342,   342,
   342,   342,   342,   342,   342,   342,   342,   351,   nil,   nil,
   nil,   nil,   nil,   351,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   351,   nil,   nil,   nil,   351,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   351,   351,   nil,   nil,   nil,   351,
   351,   351,   351,   351,   351,   351,   351,   351,   284,   nil,
   nil,   nil,   nil,   nil,   284,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   284,   nil,   nil,   nil,   284,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   284,   284,   nil,   nil,   nil,
   284,   284,   284,   284,   284,   284,   284,   284,   284,   347,
   nil,   nil,   nil,   nil,   nil,   347,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   347,   nil,   nil,   nil,   347,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   347,   347,   nil,   nil,
   nil,   347,   347,   347,   347,   347,   347,   347,   347,   347 ]

racc_action_pointer = [
  1121,   397,   390,   393,   130,   387,   390,   383,   381,   nil,
   374,   377,   375,   469,    31,   359,   nil,   368,   362,   357,
   992,   nil,   344,   nil,   nil,   nil,   339,   342,   nil,   nil,
   335,   333,   nil,   331,   325,   329,   nil,   nil,   179,   325,
   324,   nil,    63,   nil,   nil,   323,   325,   324,   nil,   322,
   nil,   316,    22,   nil,   296,   311,   301,   nil,    67,   nil,
   249,    -3,    24,   nil,    76,   243,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   302,   nil,   nil,   nil,   nil,   238,   nil,
   nil,   nil,   227,   nil,   nil,   nil,   nil,   221,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   264,   nil,
   111,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   263,   115,
   nil,   nil,   nil,   nil,   244,   261,   767,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   260,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   877,   nil,
  1076,   261,   nil,   nil,   254,   247,   nil,   nil,   706,   650,
   nil,    31,   nil,   nil,   nil,    98,   nil,   nil,   237,   nil,
   nil,   217,   215,   nil,   132,   nil,   nil,    14,   nil,    -3,
   nil,  1628,   434,   213,   nil,   378,   145,   762,  1423,  1382,
   nil,   nil,   132,   190,   nil,   nil,   nil,   nil,   nil,    94,
   nil,   nil,    62,   nil,   nil,   nil,   595,   315,   300,   nil,
   nil,   nil,    97,   104,   107,   117,   119,   nil,   nil,    49,
   525,   168,   163,   183,   172,   159,   226,   nil,  1050,   nil,
   nil,     7,    32,   nil,   229,   230,    99,   nil,   nil,   nil,
   nil,   560,   968,   249,   nil,   nil,   245,   nil,   nil,   194,
   nil,   247,   nil,   249,   101,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   234,   253,
   235,   nil,   235,   nil,    64,   nil,   200,   nil,   159,   nil,
  1464,   nil,   nil,    88,   265,   270,   nil,   nil,    -9,   221,
   nil,   222,   281,   222,  1792,   nil,   291,   nil,   nil,   292,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   823,   301,
   nil,   -40,   nil,   -10,   nil,  1546,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    20,   294,   nil,   nil,   309,
   310,   nil,   114,   nil,   nil,   nil,   297,   268,   nil,   nil,
   131,     8,  1300,   nil,  1259,  1218,  1177,  1133,  1505,  1669,
  1587,  1341,  1710,   314,   nil,   nil,   nil,  1833,   nil,   nil,
   nil,  1751,   nil,   266,   nil,   nil,   333,   nil,   329,   nil,
   nil,   321,   322,   262,   nil,   nil,   nil,   nil,     7,   nil,
   933,   nil,   nil,   nil,   156,    22,    19,   nil,   nil,   nil,
   337,   337,   166,   188,   147,    38,   154,   nil,   nil,   nil,
   nil,   313,   314,   nil,   374,   380,   129,   364,   nil,   -14,
   nil,   385,   nil,   356,    -6,   nil,   392,   nil,   nil,   nil,
   nil,   nil,   nil,    -5,    -7,   nil,   nil,   nil,   391,   376,
   397,   nil,    33,   nil,   377,   nil,   nil,   nil,   nil,   nil,
   nil ]

racc_action_default = [
   -11,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,   -49,
  -278,  -278,  -278,  -278,  -278,  -278,   -50,  -278,  -278,  -278,
  -278,   -51,  -278,  -199,  -138,   -52,  -278,  -278,  -206,  -139,
  -278,  -278,  -140,  -278,  -278,  -278,  -141,   -30,  -278,  -278,
  -278,  -142,  -278,   -16,    -1,  -278,  -278,  -278,   -17,  -278,
  -221,  -278,   -18,    -4,  -278,  -278,   -45,   -46,   -19,    -5,
  -203,   -54,   -20,    -6,  -278,  -278,  -191,  -161,  -149,  -145,
  -192,  -176,  -146,  -278,  -193,  -177,  -155,  -147,  -230,  -194,
  -178,  -148,  -232,  -195,  -179,  -156,  -137,  -278,  -180,  -173,
  -163,  -157,  -151,  -277,  -184,  -174,  -158,  -152,  -278,  -185,
  -182,  -164,  -159,  -153,  -186,  -181,  -162,  -154,  -278,  -278,
  -165,  -150,  -190,  -160,  -278,  -278,   -40,    -7,  -170,  -143,
   -99,   -97,   -98,  -100,  -278,  -276,   -91,   -92,   -93,   -94,
   -95,   -96,    -8,   -13,    -9,   -10,  -244,  -241,   -40,   -28,
   -11,  -278,    -2,  -242,  -196,  -278,   -29,  -222,  -278,   -40,
    -3,  -278,  -224,  -226,   -22,  -278,   -88,   -47,  -278,   -24,
  -205,  -278,   -69,   -70,  -278,   -55,   -65,  -278,   -26,  -278,
  -213,  -278,  -278,  -278,  -216,  -278,  -278,  -278,  -278,  -278,
  -172,  -168,  -171,  -144,  -166,  -169,  -175,  -183,  -198,  -188,
  -187,   -89,   -66,  -255,  -254,  -256,  -278,  -278,  -278,  -272,
  -273,   -31,  -278,  -278,  -278,  -278,  -278,  -274,  -271,  -278,
  -278,  -278,  -278,  -278,  -278,  -278,  -278,   -59,  -278,   -14,
   431,   -53,  -278,  -200,  -278,  -278,  -278,   -62,   -77,   -78,
   -79,  -278,  -278,  -278,  -223,   -44,   -41,   -42,   -48,  -278,
   -68,   -73,   -76,   -72,  -278,   -74,  -204,  -214,  -132,  -123,
  -121,  -119,  -134,  -124,  -120,  -135,  -133,  -127,  -101,  -278,
  -102,  -122,  -104,  -126,  -106,  -128,  -108,  -129,  -111,  -130,
  -278,  -114,  -131,  -278,  -278,  -278,  -217,  -219,  -278,  -278,
  -136,  -278,  -278,  -233,  -278,  -234,  -278,  -189,   -64,  -278,
  -248,   -21,   -32,   -33,   -36,   -37,   -34,   -35,  -278,  -278,
   -38,  -253,  -249,  -278,   -39,  -278,  -245,  -243,   -56,   -60,
   -12,   -15,   -58,  -201,  -197,  -278,  -278,   -61,   -63,  -278,
  -278,  -225,  -278,  -212,  -208,  -209,  -278,  -182,  -210,  -211,
  -278,   -71,  -278,  -218,  -278,  -278,  -278,  -278,  -278,  -278,
  -278,  -278,  -278,  -278,  -118,  -220,  -215,  -278,  -228,  -229,
  -231,  -278,  -235,  -278,  -167,  -247,  -278,  -239,  -238,  -171,
  -246,  -278,  -278,  -251,  -252,  -262,  -263,  -264,  -278,  -259,
  -278,  -257,   -90,  -202,  -278,  -278,  -278,   -43,  -207,   -75,
  -103,  -105,  -107,  -109,  -110,  -112,  -113,  -115,  -116,  -117,
  -125,  -278,  -278,  -236,  -237,  -278,  -278,  -278,  -250,  -278,
  -258,  -278,   -87,  -278,  -278,   -84,  -278,   -80,   -81,  -227,
  -275,  -240,  -266,  -278,  -278,  -269,  -260,  -261,  -278,  -278,
  -278,   -82,  -278,  -265,  -278,  -268,   -86,   -85,   -83,  -267,
  -270 ]

racc_goto_table = [
    54,   152,   129,   259,   183,   110,   299,   357,   170,    68,
   114,   101,   227,   285,   127,   126,   120,   223,   243,    98,
   369,   405,   166,   364,   201,   345,   236,    49,    38,   358,
    73,   381,    44,   344,    77,   241,     3,   354,   154,    27,
   380,    30,   113,    86,   159,     6,   217,   123,   168,   131,
   387,   388,   389,   110,   385,   386,    90,    68,   122,   101,
   108,   383,   384,   130,   357,    49,   427,   165,   119,   278,
   142,   128,   124,   404,     3,   222,   379,    27,    73,    30,
   382,   169,    77,     6,   306,   398,   394,   326,   240,   318,
   113,   313,   275,   276,   356,   331,    50,   151,   279,   281,
   282,   226,   343,   411,    90,   283,   292,   216,   108,   417,
   377,    67,   207,   247,   352,   137,   416,   215,   121,   301,
   360,   289,   302,   363,   309,   198,   426,   368,   218,   413,
   315,   414,   nil,   nil,   207,   nil,   nil,   372,   nil,   nil,
   110,   nil,   nil,   nil,    68,   207,   101,   nil,   nil,   nil,
   nil,   235,   nil,   288,   nil,   nil,   nil,   nil,   nil,    67,
   235,   nil,   nil,   242,   110,    73,   401,    49,    68,    77,
   101,    68,   219,   nil,   nil,   nil,     3,   113,   274,    27,
   nil,    30,   312,   321,   nil,     6,   nil,   nil,   nil,    73,
   nil,    90,   207,    77,   207,   108,    77,   nil,   nil,   418,
   nil,   113,   nil,   nil,   113,   353,   207,   110,   nil,   nil,
   nil,    68,   207,   101,   110,    90,   nil,   nil,    68,   108,
   101,   328,   207,   110,   110,   375,   376,    68,    68,   101,
   101,   329,    73,   325,   324,   323,    77,   319,   320,    73,
   242,   nil,   nil,    77,   113,    49,    67,   nil,    73,    73,
   311,   113,    77,    77,     3,   nil,   nil,    27,    90,    30,
   113,   113,   108,     6,   nil,    90,   nil,   nil,   391,   108,
    67,   nil,   392,    67,    90,    90,   nil,   nil,   108,   108,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   207,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    67,   nil,   nil,   nil,   nil,   235,   nil,
    67,   nil,   nil,   nil,   nil,   nil,   242,   nil,   nil,    67,
    67,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   207,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   412,   nil,   nil,   nil,   nil,   nil,   nil,   207,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   429 ]

racc_goto_check = [
    26,   117,    56,    52,    45,    79,    49,    50,   110,    26,
    26,    77,    38,   119,    54,    53,    26,   104,    41,    32,
   133,    47,    35,   131,    21,    90,    24,     3,     1,   120,
   105,    64,     2,    70,    83,    24,     4,    90,    20,     9,
    63,    10,    58,    74,    20,     5,    21,    61,    20,    58,
    68,    68,    68,    79,    67,    67,    75,    26,    60,    77,
   101,    66,    66,    57,    50,     3,    47,    32,    80,    81,
     2,    55,    51,    46,     4,   103,    42,     9,   105,    10,
    65,   107,    83,     5,   104,   131,   120,   109,    40,    38,
    58,   104,   112,   113,    49,    41,   115,   116,    73,    73,
    73,    37,    52,    50,    75,   118,    21,    34,   101,    50,
    25,    59,    26,   110,   119,   122,   133,   123,    59,   125,
   126,   128,   129,   130,    21,    19,    50,   132,    12,   135,
    45,   136,   nil,   nil,    26,   nil,   nil,    52,   nil,   nil,
    79,   nil,   nil,   nil,    26,    26,    77,   nil,   nil,   nil,
   nil,    26,   nil,    35,   nil,   nil,   nil,   nil,   nil,    59,
    26,   nil,   nil,    26,    79,   105,    49,     3,    26,    83,
    77,    26,     2,   nil,   nil,   nil,     4,    58,    32,     9,
   nil,    10,    35,   117,   nil,     5,   nil,   nil,   nil,   105,
   nil,    75,    26,    83,    26,   101,    83,   nil,   nil,    49,
   nil,    58,   nil,   nil,    58,    73,    26,    79,   nil,   nil,
   nil,    26,    26,    77,    79,    75,   nil,   nil,    26,   101,
    77,    56,    26,    79,    79,    45,    45,    26,    26,    77,
    77,    79,   105,    54,    53,    26,    83,    32,    32,   105,
    26,   nil,   nil,    83,    58,     3,    59,   nil,   105,   105,
     2,    58,    83,    83,     4,   nil,   nil,     9,    75,    10,
    58,    58,   101,     5,   nil,    75,   nil,   nil,    73,   101,
    59,   nil,    73,    59,    75,    75,   nil,   nil,   101,   101,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    59,   nil,   nil,   nil,   nil,    26,   nil,
    59,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,    59,
    59,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,    26,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26 ]

racc_goto_pointer = [
   nil,    28,    32,    27,    36,    45,   nil,   nil,   nil,    39,
    41,   nil,   -12,   nil,   nil,   nil,   nil,   nil,   nil,     9,
   -14,   -92,   nil,   nil,  -129,  -212,    -4,   nil,   nil,   nil,
   nil,   nil,     6,   nil,   -31,   -39,   nil,   -48,  -137,   nil,
   -74,  -149,  -254,   nil,   nil,   -94,  -301,  -353,   nil,  -204,
  -292,    52,  -168,    -5,    -6,    51,   -18,    43,    29,    98,
    38,    27,   nil,  -292,  -303,  -255,  -275,  -284,  -290,   nil,
  -240,   nil,   nil,   -79,    30,    43,   nil,    -2,   nil,    -8,
    49,  -106,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,
  -249,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    47,   nil,   -73,  -131,    17,   nil,    17,   nil,  -152,
   -56,   nil,   -80,   -79,   nil,    95,    46,   -50,   -77,  -169,
  -270,   nil,    84,   -19,   nil,   -93,  -181,   nil,   -75,   -90,
  -178,  -278,  -176,  -283,   nil,  -267,  -266 ]

racc_goto_default = [
   nil,   nil,   nil,   202,   205,   206,    11,    18,    22,   211,
   213,    35,   nil,    43,    48,     2,     5,    10,    17,   nil,
   nil,   228,   203,   204,   nil,   237,   249,    56,     9,    16,
    21,    25,   224,    33,   nil,   nil,    47,   nil,   nil,   162,
   163,   nil,   245,   229,   230,   nil,   nil,   nil,   403,   193,
   181,   nil,   280,    92,    97,   103,   107,   111,   199,   200,
   nil,    76,   258,   260,   262,   264,   266,   268,   271,   273,
   251,   253,   256,   nil,   nil,    24,    29,    32,    36,    41,
   nil,    69,    72,   208,    81,    85,    91,    96,   102,   106,
   184,   185,   180,    71,    75,    80,    84,    88,    94,    99,
   104,    40,    46,   nil,   nil,     7,    12,   nil,   160,   nil,
   nil,   172,   nil,   174,     1,   nil,   nil,   nil,   nil,   nil,
   nil,    31,   nil,   nil,   212,   nil,   nil,   196,   197,   nil,
   nil,   nil,   nil,   nil,   370,   nil,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 ";" => 2,
 "{" => 3,
 "}" => 4,
 "module" => 5,
 :identifier => 6,
 "local" => 7,
 "interface" => 8,
 "abstract" => 9,
 ":" => 10,
 "," => 11,
 "::" => 12,
 "valuetype" => 13,
 "custom" => 14,
 "truncatable" => 15,
 "supports" => 16,
 "public" => 17,
 "private" => 18,
 "factory" => 19,
 "(" => 20,
 ")" => 21,
 "in" => 22,
 "typeprefix" => 23,
 :string_literal => 24,
 "typeid" => 25,
 "const" => 26,
 "=" => 27,
 "|" => 28,
 "^" => 29,
 "&" => 30,
 ">>" => 31,
 "<<" => 32,
 "+" => 33,
 "-" => 34,
 "*" => 35,
 "/" => 36,
 "%" => 37,
 "~" => 38,
 :integer_literal => 39,
 :wide_string_literal => 40,
 :character_literal => 41,
 :wide_character_literal => 42,
 :fixed_pt_literal => 43,
 :floating_pt_literal => 44,
 "TRUE" => 45,
 "FALSE" => 46,
 "typedef" => 47,
 "native" => 48,
 "float" => 49,
 "double" => 50,
 "long" => 51,
 "short" => 52,
 "unsigned" => 53,
 "char" => 54,
 "wchar" => 55,
 "boolean" => 56,
 "octet" => 57,
 "any" => 58,
 "Object" => 59,
 "struct" => 60,
 "union" => 61,
 "switch" => 62,
 "case" => 63,
 "default" => 64,
 "enum" => 65,
 "sequence" => 66,
 "<" => 67,
 ">" => 68,
 "string" => 69,
 "wstring" => 70,
 "[" => 71,
 "]" => 72,
 "readonly" => 73,
 "attribute" => 74,
 "exception" => 75,
 "oneway" => 76,
 "void" => 77,
 "out" => 78,
 "inout" => 79,
 "raises" => 80,
 "context" => 81,
 "fixed" => 82,
 "ValueBase" => 83 }

racc_use_result_var = false

racc_nt_base = 84

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'";"',
'"{"',
'"}"',
'"module"',
'identifier',
'"local"',
'"interface"',
'"abstract"',
'":"',
'","',
'"::"',
'"valuetype"',
'"custom"',
'"truncatable"',
'"supports"',
'"public"',
'"private"',
'"factory"',
'"("',
'")"',
'"in"',
'"typeprefix"',
'string_literal',
'"typeid"',
'"const"',
'"="',
'"|"',
'"^"',
'"&"',
'">>"',
'"<<"',
'"+"',
'"-"',
'"*"',
'"/"',
'"%"',
'"~"',
'integer_literal',
'wide_string_literal',
'character_literal',
'wide_character_literal',
'fixed_pt_literal',
'floating_pt_literal',
'"TRUE"',
'"FALSE"',
'"typedef"',
'"native"',
'"float"',
'"double"',
'"long"',
'"short"',
'"unsigned"',
'"char"',
'"wchar"',
'"boolean"',
'"octet"',
'"any"',
'"Object"',
'"struct"',
'"union"',
'"switch"',
'"case"',
'"default"',
'"enum"',
'"sequence"',
'"<"',
'">"',
'"string"',
'"wstring"',
'"["',
'"]"',
'"readonly"',
'"attribute"',
'"exception"',
'"oneway"',
'"void"',
'"out"',
'"inout"',
'"raises"',
'"context"',
'"fixed"',
'"ValueBase"',
'$start',
'specification',
'definition',
'type_dcl',
'const_dcl',
'except_dcl',
'interface',
'module',
'value',
'typeid',
'typeprefix',
'module_header',
'_definition_1',
'interface_dcl',
'forward_dcl',
'local_interface_',
'abstract_interface_',
'regular_interface_',
'interface_header',
'interface_body',
'interface_inheritance_spec',
'export',
'attr_dcl',
'op_dcl',
'_interface_name_list',
'interface_name',
'scoped_name',
'scoped_name_0',
'value_dcl',
'value_abs_dcl',
'value_box_dcl',
'value_forward_dcl',
'type_spec',
'value_abs_header',
'value_abs_body',
'value_inheritance_spec',
'value_header',
'value_body',
'value_element',
'value_basevalue_list',
'value_interface_support_list',
'_value_name_list',
'value_name',
'state_member',
'init_dcl',
'declarators',
'init_param_decls',
'init_param_decl',
'init_param_attribute',
'param_type_spec',
'simple_declarator',
'const_type',
'const_exp',
'integer_type',
'char_type',
'wide_char_type',
'boolean_type',
'floating_pt_type',
'string_type',
'wide_string_type',
'fixed_pt_const_type',
'octet_type',
'or_expr',
'xor_expr',
'and_expr',
'shift_expr',
'add_expr',
'mult_expr',
'unary_expr',
'unary_operator',
'primary_expr',
'literal',
'boolean_literal',
'positive_int_const',
'type_declarator',
'struct_type',
'struct_forward_dcl',
'union_type',
'union_forward_dcl',
'enum_type',
'native_declarator',
'simple_type_spec',
'constr_type_spec',
'base_type_spec',
'template_type_spec',
'any_type',
'object_type',
'value_base_type',
'sequence_type',
'fixed_pt_type',
'declarator',
'complex_declarator',
'array_declarator',
'signed_int',
'unsigned_int',
'signed_short_int',
'signed_long_int',
'signed_longlong_int',
'unsigned_short_int',
'unsigned_long_int',
'unsigned_longlong_int',
'struct_def',
'struct_header',
'member_list',
'member',
'union_def',
'union_header',
'union_body',
'union_switch_spec',
'switch_type_spec',
'union_case',
'_case_label_1',
'element_spec',
'case_label',
'_enum_header',
'_enum_body',
'_enumerator_list',
'enumerator',
'_fixed_array_size_1',
'fixed_array_size',
'_simple_declarator_list',
'_except_header',
'_except_body',
'_member_list0',
'_op_dcl_header',
'_op_dcl_parameter',
'_op_dcl_footer',
'op_attribute',
'op_type_spec',
'parameter_dcls',
'raises_expr',
'context_expr',
'_param_dcl_list',
'param_dcl',
'param_attribute',
'_scoped_name_list',
'_string_literal_list']

Racc_debug_parser = true

##### racc system variables end #####

 # reduce 0 omitted

 # reduce 1 omitted

 # reduce 2 omitted

 # reduce 3 omitted

 # reduce 4 omitted

 # reduce 5 omitted

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

 # reduce 10 omitted

 # reduce 11 omitted

module_eval <<'.,.,', 'parser.ry', 32
  def _reduce_12( val, _values)
 @d.end_module(val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 35
  def _reduce_13( val, _values)
 @d.define_module(val[1])
  end
.,.,

 # reduce 14 omitted

 # reduce 15 omitted

 # reduce 16 omitted

 # reduce 17 omitted

module_eval <<'.,.,', 'parser.ry', 45
  def _reduce_18( val, _values)
 @d.declare_interface(val[1], val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 47
  def _reduce_19( val, _values)
 @d.declare_interface(val[1], val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 49
  def _reduce_20( val, _values)
 @d.declare_interface(val[1], val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 52
  def _reduce_21( val, _values)
 @d.end_interface(val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 55
  def _reduce_22( val, _values)
 @d.define_interface(val[1], val[0], val[2])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 57
  def _reduce_23( val, _values)
 @d.define_interface(val[1], val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 59
  def _reduce_24( val, _values)
 @d.define_interface(val[1], val[0], val[2])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 61
  def _reduce_25( val, _values)
 @d.define_interface(val[1], val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 63
  def _reduce_26( val, _values)
 @d.define_interface(val[1], val[0], val[2])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 65
  def _reduce_27( val, _values)
 @d.define_interface(val[1], val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 67
  def _reduce_28( val, _values)
 :local
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 69
  def _reduce_29( val, _values)
 :abstract
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 71
  def _reduce_30( val, _values)
 :none
  end
.,.,

 # reduce 31 omitted

 # reduce 32 omitted

 # reduce 33 omitted

 # reduce 34 omitted

 # reduce 35 omitted

 # reduce 36 omitted

 # reduce 37 omitted

 # reduce 38 omitted

 # reduce 39 omitted

 # reduce 40 omitted

module_eval <<'.,.,', 'parser.ry', 85
  def _reduce_41( val, _values)
 val[1]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 86
  def _reduce_42( val, _values)
 [val[0]]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 88
  def _reduce_43( val, _values)
 val[0] << val[2]; val[0]
  end
.,.,

 # reduce 44 omitted

module_eval <<'.,.,', 'parser.ry', 92
  def _reduce_45( val, _values)
 @d.parse_scopedname(*val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 94
  def _reduce_46( val, _values)
 [FALSE, [val[0]]]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 95
  def _reduce_47( val, _values)
 [TRUE,  [val[1]]]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 97
  def _reduce_48( val, _values)
 val[0][1] << val[2]; val[0]
  end
.,.,

 # reduce 49 omitted

 # reduce 50 omitted

 # reduce 51 omitted

 # reduce 52 omitted

module_eval <<'.,.,', 'parser.ry', 105
  def _reduce_53( val, _values)
 @d.declare_valuetype(val[2], :abstract)
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 107
  def _reduce_54( val, _values)
 @d.declare_valuetype(val[1], :none)
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 110
  def _reduce_55( val, _values)
 @d.define_valuebox(val[1], val[2])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 113
  def _reduce_56( val, _values)
 @d.end_valuetype(val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 116
  def _reduce_57( val, _values)
 @d.define_valuetype(val[2], :abstract)
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 118
  def _reduce_58( val, _values)
 @d.define_valuetype(val[2], :abstract, val[3])
  end
.,.,

 # reduce 59 omitted

 # reduce 60 omitted

 # reduce 61 omitted

 # reduce 62 omitted

 # reduce 63 omitted

module_eval <<'.,.,', 'parser.ry', 129
  def _reduce_64( val, _values)
 @d.define_valuetype(val[2], :custom, val[3])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 131
  def _reduce_65( val, _values)
 @d.define_valuetype(val[1], :none, val[2])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 133
  def _reduce_66( val, _values)
 @d.define_valuetype(val[2], :custom)
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 135
  def _reduce_67( val, _values)
 @d.define_valuetype(val[1], :none)
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 138
  def _reduce_68( val, _values)
 Hash[ :base => val[0], :supports => val[1] ]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 140
  def _reduce_69( val, _values)
 Hash[ :base => val[0] ]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 142
  def _reduce_70( val, _values)
 Hash[ :supports => val[0] ]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 145
  def _reduce_71( val, _values)
 Hash[ :truncatable => true, :list => val[1] ]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 147
  def _reduce_72( val, _values)
 Hash[ :truncatable => false, :list => val[0] ]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 150
  def _reduce_73( val, _values)
 val[1]
  end
.,.,

 # reduce 74 omitted

 # reduce 75 omitted

 # reduce 76 omitted

 # reduce 77 omitted

 # reduce 78 omitted

 # reduce 79 omitted

 # reduce 80 omitted

 # reduce 81 omitted

 # reduce 82 omitted

 # reduce 83 omitted

 # reduce 84 omitted

 # reduce 85 omitted

 # reduce 86 omitted

 # reduce 87 omitted

module_eval <<'.,.,', 'parser.ry', 177
  def _reduce_88( val, _values)
 @d.define_typeprefix(val[1], val[2])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 180
  def _reduce_89( val, _values)
 @d.define_typeid(val[1], val[2])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 183
  def _reduce_90( val, _values)
 @d.define_const(val[1], val[2], val[4])
  end
.,.,

 # reduce 91 omitted

 # reduce 92 omitted

 # reduce 93 omitted

 # reduce 94 omitted

 # reduce 95 omitted

 # reduce 96 omitted

 # reduce 97 omitted

 # reduce 98 omitted

 # reduce 99 omitted

 # reduce 100 omitted

 # reduce 101 omitted

 # reduce 102 omitted

module_eval <<'.,.,', 'parser.ry', 200
  def _reduce_103( val, _values)
 Expression::Operation::Or.new(val[0], val[2])
  end
.,.,

 # reduce 104 omitted

module_eval <<'.,.,', 'parser.ry', 204
  def _reduce_105( val, _values)
 Expression::Operation::Xor.new(val[0], val[2])
  end
.,.,

 # reduce 106 omitted

module_eval <<'.,.,', 'parser.ry', 208
  def _reduce_107( val, _values)
 Expression::Operation::And.new(val[0], val[2])
  end
.,.,

 # reduce 108 omitted

module_eval <<'.,.,', 'parser.ry', 212
  def _reduce_109( val, _values)
 Expression::Operation::RShift.new(val[0], val[2])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 214
  def _reduce_110( val, _values)
 Expression::Operation::LShift.new(val[0], val[2])
  end
.,.,

 # reduce 111 omitted

module_eval <<'.,.,', 'parser.ry', 218
  def _reduce_112( val, _values)
 Expression::Operation::Add.new(val[0], val[2])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 220
  def _reduce_113( val, _values)
 Expression::Operation::Minus.new(val[0], val[2])
  end
.,.,

 # reduce 114 omitted

module_eval <<'.,.,', 'parser.ry', 224
  def _reduce_115( val, _values)
 Expression::Operation::Mult.new(val[0], val[2])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 226
  def _reduce_116( val, _values)
 Expression::Operation::Div.new(val[0], val[2])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 228
  def _reduce_117( val, _values)
 Expression::Operation::Mod.new(val[0], val[2])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 230
  def _reduce_118( val, _values)
 val[0].new(val[1])
  end
.,.,

 # reduce 119 omitted

module_eval <<'.,.,', 'parser.ry', 233
  def _reduce_120( val, _values)
 Expression::Operation::UnaryMinus
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 234
  def _reduce_121( val, _values)
 Expression::Operation::UnaryPlus
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 235
  def _reduce_122( val, _values)
 Expression::Operation::UnaryNot
  end
.,.,

 # reduce 123 omitted

 # reduce 124 omitted

 # reduce 125 omitted

module_eval <<'.,.,', 'parser.ry', 242
  def _reduce_126( val, _values)
 @d.parse_literal(:integer, val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 243
  def _reduce_127( val, _values)
 @d.parse_literal(:string,  val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 244
  def _reduce_128( val, _values)
 @d.parse_literal(:wstring, val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 245
  def _reduce_129( val, _values)
 @d.parse_literal(:char,    val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 246
  def _reduce_130( val, _values)
 @d.parse_literal(:wchar,   val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 247
  def _reduce_131( val, _values)
 @d.parse_literal(:fixed,   val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 248
  def _reduce_132( val, _values)
 @d.parse_literal(:float,   val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 249
  def _reduce_133( val, _values)
 @d.parse_literal(:boolean, val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 251
  def _reduce_134( val, _values)
 TRUE
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 252
  def _reduce_135( val, _values)
 FALSE
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 254
  def _reduce_136( val, _values)
 @d.parse_positive_int(val[0])
  end
.,.,

 # reduce 137 omitted

 # reduce 138 omitted

 # reduce 139 omitted

 # reduce 140 omitted

 # reduce 141 omitted

 # reduce 142 omitted

 # reduce 143 omitted

module_eval <<'.,.,', 'parser.ry', 270
  def _reduce_144( val, _values)
    dcls = parse_type_declarator(val[0], val[1])
    dcls.each do |d|
      @d.declare_typedef(d[0], d[1])
    end
  end
.,.,

 # reduce 145 omitted

 # reduce 146 omitted

 # reduce 147 omitted

 # reduce 148 omitted

 # reduce 149 omitted

 # reduce 150 omitted

 # reduce 151 omitted

 # reduce 152 omitted

 # reduce 153 omitted

 # reduce 154 omitted

 # reduce 155 omitted

 # reduce 156 omitted

 # reduce 157 omitted

 # reduce 158 omitted

 # reduce 159 omitted

 # reduce 160 omitted

 # reduce 161 omitted

 # reduce 162 omitted

 # reduce 163 omitted

 # reduce 164 omitted

 # reduce 165 omitted

module_eval <<'.,.,', 'parser.ry', 298
  def _reduce_166( val, _values)
 [val[0]]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 299
  def _reduce_167( val, _values)
 val[0] << val[2]
  end
.,.,

 # reduce 168 omitted

 # reduce 169 omitted

module_eval <<'.,.,', 'parser.ry', 304
  def _reduce_170( val, _values)
 @d.declare_typedef(::IDL::Type::Native.new, val[0])
  end
.,.,

 # reduce 171 omitted

 # reduce 172 omitted

module_eval <<'.,.,', 'parser.ry', 310
  def _reduce_173( val, _values)
 ::IDL::Type::Float.new
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 311
  def _reduce_174( val, _values)
 ::IDL::Type::Double.new
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 312
  def _reduce_175( val, _values)
 ::IDL::Type::LongDouble.new
  end
.,.,

 # reduce 176 omitted

 # reduce 177 omitted

 # reduce 178 omitted

 # reduce 179 omitted

 # reduce 180 omitted

module_eval <<'.,.,', 'parser.ry', 321
  def _reduce_181( val, _values)
 ::IDL::Type::Short.new
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 323
  def _reduce_182( val, _values)
 ::IDL::Type::Long.new
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 325
  def _reduce_183( val, _values)
 ::IDL::Type::LongLong.new
  end
.,.,

 # reduce 184 omitted

 # reduce 185 omitted

 # reduce 186 omitted

module_eval <<'.,.,', 'parser.ry', 331
  def _reduce_187( val, _values)
 ::IDL::Type::UShort.new
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 333
  def _reduce_188( val, _values)
 ::IDL::Type::ULong.new
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 336
  def _reduce_189( val, _values)
 ::IDL::Type::ULongLong.new
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 338
  def _reduce_190( val, _values)
 ::IDL::Type::Char.new
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 340
  def _reduce_191( val, _values)
 ::IDL::Type::WChar.new
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 342
  def _reduce_192( val, _values)
 ::IDL::Type::Boolean.new
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 344
  def _reduce_193( val, _values)
 ::IDL::Type::Octet.new
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 346
  def _reduce_194( val, _values)
 ::IDL::Type::Any.new
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 348
  def _reduce_195( val, _values)
 ::IDL::Type::Object.new
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 350
  def _reduce_196( val, _values)
 @d.declare_struct(val[1])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 353
  def _reduce_197( val, _values)
 @d.end_struct(val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 355
  def _reduce_198( val, _values)
 @d.define_struct(val[1])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 357
  def _reduce_199( val, _values)
 nil
  end
.,.,

 # reduce 200 omitted

 # reduce 201 omitted

module_eval <<'.,.,', 'parser.ry', 369
  def _reduce_202( val, _values)
    dcls = parse_type_declarator(val[0], val[1])
    dcls.each do |d|
      @d.declare_member(d[0], d[1])
    end
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 371
  def _reduce_203( val, _values)
 @d.declare_union(val[1])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 374
  def _reduce_204( val, _values)
 @d.end_union(val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 377
  def _reduce_205( val, _values)
 @d.define_union(val[1], val[2])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 379
  def _reduce_206( val, _values)
 nil
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 382
  def _reduce_207( val, _values)
 val[2]
  end
.,.,

 # reduce 208 omitted

 # reduce 209 omitted

 # reduce 210 omitted

 # reduce 211 omitted

 # reduce 212 omitted

 # reduce 213 omitted

 # reduce 214 omitted

module_eval <<'.,.,', 'parser.ry', 394
  def _reduce_215( val, _values)
 @d.define_case(val[0], val[1][0], val[1][1])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 396
  def _reduce_216( val, _values)
 [val[0]]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 397
  def _reduce_217( val, _values)
 val[0] << val[1]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 399
  def _reduce_218( val, _values)
 val[1]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 400
  def _reduce_219( val, _values)
 :default
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 403
  def _reduce_220( val, _values)
 val
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 406
  def _reduce_221( val, _values)
 @d.end_enum(val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 408
  def _reduce_222( val, _values)
 @d.define_enum(val[1])
  end
.,.,

 # reduce 223 omitted

 # reduce 224 omitted

 # reduce 225 omitted

module_eval <<'.,.,', 'parser.ry', 417
  def _reduce_226( val, _values)
    @d.declare_enumerator(val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 419
  def _reduce_227( val, _values)
 ::IDL::Type::Sequence.new(val[2], val[4])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 421
  def _reduce_228( val, _values)
 ::IDL::Type::Sequence.new(val[2], nil)
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 424
  def _reduce_229( val, _values)
 ::IDL::Type::String.new(val[2])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 426
  def _reduce_230( val, _values)
 ::IDL::Type::String.new()
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 429
  def _reduce_231( val, _values)
 ::IDL::Type::WString.new(val[2])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 431
  def _reduce_232( val, _values)
 ::IDL::Type::WString.new()
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 433
  def _reduce_233( val, _values)
 val
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 435
  def _reduce_234( val, _values)
 [val[0]]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 436
  def _reduce_235( val, _values)
val[0] << val[1]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 438
  def _reduce_236( val, _values)
 val[1]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 445
  def _reduce_237( val, _values)
  dcls = parse_type_declarator(val[2], val[3])
                        dcls.each do |d|
                          @d.declare_attribute(d[0], d[1], true)
                        end
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 451
  def _reduce_238( val, _values)
  dcls = parse_type_declarator(val[1], val[2])
                        dcls.each do |d|
                          @d.declare_attribute(d[0], d[1])
                        end
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 456
  def _reduce_239( val, _values)
 [val[0]]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 457
  def _reduce_240( val, _values)
 val[0] << val[2]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 460
  def _reduce_241( val, _values)
 @d.end_exception(val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 462
  def _reduce_242( val, _values)
 @d.define_exception(val[1])
  end
.,.,

 # reduce 243 omitted

 # reduce 244 omitted

 # reduce 245 omitted

 # reduce 246 omitted

module_eval <<'.,.,', 'parser.ry', 471
  def _reduce_247( val, _values)
 @d.declare_op_header(val[0], val[1], val[2])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 473
  def _reduce_248( val, _values)
 @d.declare_op_header(nil, val[0], val[1])
  end
.,.,

 # reduce 249 omitted

module_eval <<'.,.,', 'parser.ry', 478
  def _reduce_250( val, _values)
 @d.declare_op_footer(val[0], val[1])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 480
  def _reduce_251( val, _values)
 @d.declare_op_footer(val[0], nil)
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 482
  def _reduce_252( val, _values)
 @d.declare_op_footer(nil, val[0])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 484
  def _reduce_253( val, _values)
 @d.declare_op_footer(nil,nil)
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 486
  def _reduce_254( val, _values)
 :oneway
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 488
  def _reduce_255( val, _values)
 val[0]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 489
  def _reduce_256( val, _values)
 ::IDL::Type::Void.new
  end
.,.,

 # reduce 257 omitted

 # reduce 258 omitted

 # reduce 259 omitted

 # reduce 260 omitted

module_eval <<'.,.,', 'parser.ry', 498
  def _reduce_261( val, _values)
 @d.declare_op_parameter(val[0], val[1], val[2])
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 500
  def _reduce_262( val, _values)
 :in
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 501
  def _reduce_263( val, _values)
 :out
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 502
  def _reduce_264( val, _values)
 :inout
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 504
  def _reduce_265( val, _values)
 val[2]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 506
  def _reduce_266( val, _values)
 val
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 507
  def _reduce_267( val, _values)
 val[0] << val[2]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 509
  def _reduce_268( val, _values)
 val[2]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 511
  def _reduce_269( val, _values)
 val
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 512
  def _reduce_270( val, _values)
 val[0] << val[2]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 514
  def _reduce_271( val, _values)
 val[0]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 515
  def _reduce_272( val, _values)
 val[0]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 516
  def _reduce_273( val, _values)
 val[0]
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 517
  def _reduce_274( val, _values)
 val[0]
  end
.,.,

 # reduce 275 omitted

 # reduce 276 omitted

module_eval <<'.,.,', 'parser.ry', 524
  def _reduce_277( val, _values)
 BASETYPE_VALUE
  end
.,.,

 def _reduce_none( val, _values)
  val[0]
 end

end   # class Parser


end #of module IDL
